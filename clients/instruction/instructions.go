package instruct

import (
	"fmt"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type InstructType int

const (
	Windows InstructType = iota
	Android
	IOS
)

type InstructionState struct {
	CurrentStep int
	MessageID   int
	ChatID      int64
}

var (
	windowsStates  = make(map[int64]*InstructionState)
	androidStates  = make(map[int64]*InstructionState)
	iosStates      = make(map[int64]*InstructionState)
	showCertButton = make(map[int64]bool) // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
)

// EnableCertButton –≤–∫–ª—é—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
func EnableCertButton(chatID int64, enable bool) {
	showCertButton[chatID] = enable
}

func SetInstructKeyboard(messageID int, chatID int64, instructType InstructType) {

	switch instructType {
	case Windows:
		windowsStates[chatID] = &InstructionState{
			CurrentStep: -1,
			MessageID:   messageID,
			ChatID:      chatID,
		}
	case Android:
		androidStates[chatID] = &InstructionState{
			CurrentStep: -1,
			MessageID:   messageID,
			ChatID:      chatID,
		}
	case IOS:
		iosStates[chatID] = &InstructionState{
			CurrentStep: -1,
			MessageID:   messageID,
			ChatID:      chatID,
		}
	}
}

func InstructionWindows(chatID int64, bot *tgbotapi.BotAPI, step int) {
	steps := []struct {
		photoPath string
		caption   string
	}{
		{"InstructionPhotos/Windows/1.png", `–°–∫–∞—á–∞–π—Ç–µ <a href="https://openvpn.net/community/">OpenVPN</a> —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞`},
		{"InstructionPhotos/Windows/2.png", "–ü–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ —Ç—Ä–µ–π –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É"},
		{"InstructionPhotos/Windows/3.png", "–ü–ö–ú –ø–æ –∑–Ω–∞—á–∫—É OpenVPN ‚Üí –ò–º–ø–æ—Ä—Ç ‚Üí ¬´–ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏¬ª. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –º—ã –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–º"},
		{"InstructionPhotos/Windows/4.png", "–°–Ω–æ–≤–∞ –ü–ö–ú –ø–æ –∑–Ω–∞—á–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è¬ª"},
	}

	// –ì—Ä–∞–Ω–∏—Ü—ã
	if step < 0 {
		step = 0
	}
	if step >= len(steps) {
		step = len(steps) - 1
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	var row []tgbotapi.InlineKeyboardButton

	if step > 0 {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("win_prev_%d", step)))
	}
	row = append(row, tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("–®–∞–≥ %d/%d", step+1, len(steps)), "win_current"))
	if step < len(steps)-1 {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", fmt.Sprintf("win_next_%d", step)))
	}
	rows = append(rows, row)

	if step == 0 {
		linkRow := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–°–∫–∞—á–∞—Ç—å ‚ÜóÔ∏è", "https://swupdate.openvpn.org/community/releases/OpenVPN-2.6.15-I001-amd64.msi"),
		)

		rows = append(rows, linkRow)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
	if showCertButton[chatID] {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì• –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", "resend_certificate"),
		))
	}

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚ùå –í—ã–π—Ç–∏", "nav_instructions"),
	))

	kb := tgbotapi.NewInlineKeyboardMarkup(rows...)

	// –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ –º–µ–¥–∏–∞
	if state, exists := windowsStates[chatID]; exists && state.MessageID != 0 {

		image := tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(steps[step].photoPath))
		image.Caption = steps[step].caption
		image.ParseMode = "HTML"

		edit := tgbotapi.EditMessageMediaConfig{
			BaseEdit: tgbotapi.BaseEdit{
				ChatID:      chatID,
				MessageID:   state.MessageID,
				ReplyMarkup: &kb,
			},
			Media: image,
		}

		if _, err := bot.Send(edit); err != nil {
			log.Printf("edit media failed: %v", err)
			return
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		state.CurrentStep = step
		windowsStates[chatID] = state
		return
	}

	// –ò–Ω–∞—á–µ ‚Äî –ø–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath(steps[step].photoPath))
	photo.Caption = steps[step].caption
	photo.ParseMode = "HTML"
	photo.ReplyMarkup = kb

	msg, err := bot.Send(photo)
	if err != nil {
		log.Printf("send photo failed: %v", err)
		return
	}

	windowsStates[chatID] = &InstructionState{
		CurrentStep: step,
		MessageID:   msg.MessageID,
		ChatID:      chatID,
	}
}

func InstructionAndroid(chatID int64, bot *tgbotapi.BotAPI, step int) {
	steps := []struct {
		photoPath string
		caption   string
	}{
		{"InstructionPhotos/Android/0.jpg", `–°–∫–∞—á–∞–π—Ç–µ <a href="https://play.google.com/store/apps/details?id=net.openvpn.openvpn">OpenVPN</a> –∏–∑ Google Play`},
		{"InstructionPhotos/Android/1.jpg", "–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –Ω–∞–π–¥–∏—Ç–µ —Ñ–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"},
		{"InstructionPhotos/Android/2.jpg", "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∞–π–ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é OpenVPN"},
		{"InstructionPhotos/Android/3.jpg", "–ù–∞–∂–º–∏—Ç–µ OK –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å"},
	}

	// –ì—Ä–∞–Ω–∏—Ü—ã
	if step < 0 {
		step = 0
	}
	if step >= len(steps) {
		step = len(steps) - 1
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	var row []tgbotapi.InlineKeyboardButton

	if step > 0 {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("android_prev_%d", step)))
	}
	row = append(row, tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("Android %d/%d", step+1, len(steps)), "android_current"))
	if step < len(steps)-1 {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", fmt.Sprintf("android_next_%d", step)))
	}

	rows = append(rows, row)

	if step == 0 {
		linkRow := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–°–∫–∞—á–∞—Ç—å ‚ÜóÔ∏è", "https://play.google.com/store/apps/details?id=net.openvpn.openvpn"),
		)

		rows = append(rows, linkRow)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
	if showCertButton[chatID] {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì• –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", "resend_certificate"),
		))
	}

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚ùå –í—ã–π—Ç–∏", "nav_instructions"),
	))

	kb := tgbotapi.NewInlineKeyboardMarkup(rows...)

	// –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
	if state, ok := androidStates[chatID]; ok && state.MessageID != 0 {
		media := tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(steps[step].photoPath))
		media.Caption = steps[step].caption
		media.ParseMode = "HTML"

		edit := tgbotapi.EditMessageMediaConfig{
			BaseEdit: tgbotapi.BaseEdit{
				ChatID:      chatID,
				MessageID:   state.MessageID,
				ReplyMarkup: &kb,
			},
			Media: media,
		}
		if _, err := bot.Send(edit); err != nil {
			log.Printf("android edit media failed: %v", err)
			return
		}
		state.CurrentStep = step
		androidStates[chatID] = state
		return
	}

	// –ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
	if step == 0 {
		msg := tgbotapi.NewMessage(chatID, steps[step].caption)
		msg.ParseMode = "HTML"
		msg.ReplyMarkup = kb
		sent, err := bot.Send(msg)
		if err != nil {
			log.Printf("android send text failed: %v", err)
			return
		}
		androidStates[chatID] = &InstructionState{CurrentStep: step, MessageID: sent.MessageID, ChatID: chatID}
		return
	}

	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath(steps[step].photoPath))
	photo.Caption = steps[step].caption
	photo.ParseMode = "HTML"
	photo.ReplyMarkup = kb
	sent, err := bot.Send(photo)
	if err != nil {
		log.Printf("android send photo failed: %v", err)
		return
	}
	androidStates[chatID] = &InstructionState{CurrentStep: step, MessageID: sent.MessageID, ChatID: chatID}
}

func InstructionIos(chatID int64, bot *tgbotapi.BotAPI, step int) {
	steps := []struct {
		photoPath string
		caption   string
	}{
		{"InstructionPhotos/Ios/0.jpg", `–°–∫–∞—á–∞–π—Ç–µ <a href="https://apps.apple.com/au/app/openvpn-connect/id590379981">OpenVPN</a> –∏–∑ App Store`},
		{"InstructionPhotos/Ios/1.jpg", "–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"},
		{"InstructionPhotos/Ios/2.jpg", "–ù–∞–π–¥–∏—Ç–µ —Ñ–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"},
		{"InstructionPhotos/Ios/4.png", "–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ OpenVPN"},
		{"InstructionPhotos/Ios/5.jpg", "–ù–∞–∂–º–∏—Ç–µ ¬´ADD¬ª –∏ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å"},
	}

	// –ì—Ä–∞–Ω–∏—Ü—ã
	if step < 0 {
		step = 0
	}
	if step >= len(steps) {
		step = len(steps) - 1
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	var row []tgbotapi.InlineKeyboardButton

	if step > 0 {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("ios_prev_%d", step)))
	}
	row = append(row, tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("iOS %d/%d", step+1, len(steps)), "ios_current"))
	if step < len(steps)-1 {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", fmt.Sprintf("ios_next_%d", step)))
	}

	rows = append(rows, row)

	if step == 0 {
		linkRow := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–°–∫–∞—á–∞—Ç—å ‚ÜóÔ∏è", "https://apps.apple.com/us/app/openvpn-connect/id590379981"),
		)
		rows = append(rows, linkRow)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
	if showCertButton[chatID] {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì• –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", "resend_certificate"),
		))
	}

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚ùå –í—ã–π—Ç–∏", "nav_instructions"),
	))

	kb := tgbotapi.NewInlineKeyboardMarkup(rows...)

	// –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
	if state, ok := iosStates[chatID]; ok && state.MessageID != 0 {
		media := tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(steps[step].photoPath))
		media.Caption = steps[step].caption
		media.ParseMode = "HTML"

		edit := tgbotapi.EditMessageMediaConfig{
			BaseEdit: tgbotapi.BaseEdit{
				ChatID:      chatID,
				MessageID:   state.MessageID,
				ReplyMarkup: &kb,
			},
			Media: media,
		}
		if _, err := bot.Send(edit); err != nil {
			log.Printf("ios edit media failed: %v", err)
			return
		}

		state.CurrentStep = step
		iosStates[chatID] = state
		return
	}

	// –ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
	if step == 0 {
		msg := tgbotapi.NewMessage(chatID, steps[step].caption)
		msg.ParseMode = "HTML"
		msg.ReplyMarkup = kb
		sent, err := bot.Send(msg)
		if err != nil {
			log.Printf("ios send text failed: %v", err)
			return
		}
		iosStates[chatID] = &InstructionState{CurrentStep: step, MessageID: sent.MessageID, ChatID: chatID}
		return
	}

	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath(steps[step].photoPath))
	photo.Caption = steps[step].caption
	photo.ParseMode = "HTML"
	photo.ReplyMarkup = kb
	sent, err := bot.Send(photo)
	if err != nil {
		log.Printf("ios send photo failed: %v", err)
		return
	}
	iosStates[chatID] = &InstructionState{CurrentStep: step, MessageID: sent.MessageID, ChatID: chatID}
}

func ResetState(chatID int64) {
	delete(windowsStates, chatID)
	delete(androidStates, chatID)
	delete(iosStates, chatID)
}

// func SendInstructMenu(bot *tgbotapi.BotAPI, chatID int64) {
// 	buttons := tgbotapi.NewInlineKeyboardMarkup(
// 		tgbotapi.NewInlineKeyboardRow(
// 			tgbotapi.NewInlineKeyboardButtonData("ü™ü Windows", "windows"),
// 			tgbotapi.NewInlineKeyboardButtonData("üì± Android", "android"),
// 		),
// 		tgbotapi.NewInlineKeyboardRow(
// 			tgbotapi.NewInlineKeyboardButtonData("üçé IOS", "ios"),
// 		),
// 	)

// 	msg := tgbotapi.NewMessage(chatID, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
// 	msg.ReplyMarkup = buttons
// 	bot.Send(msg)
// }
