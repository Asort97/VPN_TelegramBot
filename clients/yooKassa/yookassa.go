package yookassa

import (
	"bytes"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"
	// tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	// tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	// tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type YooKassaClient struct {
	yookassaShopID    string
	yookassaSecretKey string
}

type YooKassaPaymentRequest struct {
	Amount struct {
		Value    string `json:"value"`
		Currency string `json:"currency"`
	} `json:"amount"`
	Capture      bool                   `json:"capture"`
	Confirmation map[string]interface{} `json:"confirmation"`
	Description  string                 `json:"description"`
	Metadata     map[string]interface{} `json:"metadata"`
	Receipt      *Receipt               `json:"receipt,omitempty"` // –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫ –¥–ª—è 54-–§–ó
}

type Receipt struct {
	Customer struct {
		Email string `json:"email"`
	} `json:"customer"`
	Items []ReceiptItem `json:"items"`
}

type ReceiptItem struct {
	Description string `json:"description"`
	Quantity    string `json:"quantity"`
	Amount      struct {
		Value    string `json:"value"`
		Currency string `json:"currency"`
	} `json:"amount"`
	VatCode        int    `json:"vat_code"`
	PaymentMode    string `json:"payment_mode"`
	PaymentSubject string `json:"payment_subject"`
}

type YooKassaPaymentResponse struct {
	ID           string                 `json:"id"`
	Status       string                 `json:"status"`
	Amount       map[string]interface{} `json:"amount"`
	Description  string                 `json:"description"`
	Recipient    map[string]interface{} `json:"recipient"`
	CreatedAt    string                 `json:"created_at"`
	Confirmation map[string]interface{} `json:"confirmation"`
	Paid         bool                   `json:"paid"`
	Refundable   bool                   `json:"refundable"`
	Metadata     map[string]interface{} `json:"metadata"`
	Receipt      *Receipt               `json:"receipt,omitempty"`
}

func New(shopID, apiKey string) *YooKassaClient {

	return &YooKassaClient{
		yookassaShopID:    shopID,
		yookassaSecretKey: apiKey,
	}
}

func (y *YooKassaClient) CreateYooKassaPayment(amount float64, description string, chatID int64, product string, userEmail string) (*YooKassaPaymentResponse, error) {
	paymentReq := YooKassaPaymentRequest{}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "299.00")
	paymentReq.Amount.Value = fmt.Sprintf("%.2f", amount)
	paymentReq.Amount.Currency = "RUB"
	paymentReq.Capture = true

	// –ü–†–ê–í–ò–õ–¨–ù–û–ï –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
	paymentReq.Confirmation = map[string]interface{}{
		"type":       "redirect",
		"return_url": "https://t.me/your_bot", // URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
	}

	paymentReq.Description = description

	// –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å map[string]interface{}
	paymentReq.Metadata = map[string]interface{}{
		"chat_id":  chatID,
		"product":  product,
		"order_id": fmt.Sprintf("order_%d_%d", chatID, time.Now().Unix()),
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫ –¥–ª—è 54-–§–ó (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
	if userEmail != "" {
		paymentReq.Receipt = &Receipt{
			Customer: struct {
				Email string `json:"email"`
			}{Email: userEmail},
			Items: []ReceiptItem{
				{
					Description: description,
					Quantity:    "1.00",
					Amount: struct {
						Value    string `json:"value"`
						Currency string `json:"currency"`
					}{
						Value:    fmt.Sprintf("%.2f", amount),
						Currency: "RUB",
					},
					VatCode:        1, // –ù–î–° 20%
					PaymentMode:    "full_payment",
					PaymentSubject: "service",
				},
			},
		}
	}

	jsonData, err := json.Marshal(paymentReq)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞: %v", err)
	}

	client := &http.Client{Timeout: 30 * time.Second}
	req, err := http.NewRequest("POST",
		"https://api.yookassa.ru/v3/payments",
		bytes.NewBuffer(jsonData))
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}

	// Basic Auth –¥–ª—è –Æ–∫–∞—Å—Å—ã
	auth := fmt.Sprintf("%s:%s", y.yookassaShopID, y.yookassaSecretKey)
	req.Header.Set("Authorization", "Basic "+base64.StdEncoding.EncodeToString([]byte(auth)))
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Idempotence-Key", fmt.Sprintf("%d", time.Now().UnixNano()))

	resp, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	if resp.StatusCode != 200 {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ API –Æ–∫–∞—Å—Å—ã: %s, —Ç–µ–ª–æ: %s", resp.Status, string(body))
	}

	var paymentResp YooKassaPaymentResponse
	err = json.Unmarshal(body, &paymentResp)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	return &paymentResp, nil
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
func (y *YooKassaClient) GetYooKassaPaymentStatus(paymentID string) (*YooKassaPaymentResponse, error) {
	client := &http.Client{Timeout: 30 * time.Second}
	req, err := http.NewRequest("GET",
		fmt.Sprintf("https://api.yookassa.ru/v3/payments/%s", paymentID),
		nil)
	if err != nil {
		return nil, err
	}

	auth := fmt.Sprintf("%s:%s", y.yookassaShopID, y.yookassaSecretKey)
	req.Header.Set("Authorization", "Basic "+base64.StdEncoding.EncodeToString([]byte(auth)))

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	var paymentResp YooKassaPaymentResponse
	err = json.Unmarshal(body, &paymentResp)
	if err != nil {
		return nil, err
	}

	return &paymentResp, nil
}

// // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
// func (y *YooKassaClient) sendYooKassaPaymentButton(bot *tgbotapi.BotAPI, chatID int64, amount float64, productName string, userEmail string) error {
// 	payment, err := y.CreateYooKassaPayment(
// 		amount,
// 		productName,
// 		chatID,
// 		productName,
// 		userEmail,
// 	)
// 	if err != nil {
// 		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: %v", err)
// 	}

// 	// –ò–∑–≤–ª–µ–∫–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–∑ confirmation
// 	confirmationURL := ""
// 	if confirmation, ok := payment.Confirmation["confirmation_url"].(string); ok {
// 		confirmationURL = confirmation
// 	} else {
// 		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –æ–ø–ª–∞—Ç—ã")
// 	}

// 	message := fmt.Sprintf(`üíé *%s*

// üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: *%.2f —Ä—É–±.*
// üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s

// –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:`,
// 		productName, amount, productName)

// 	msg := tgbotapi.NewMessage(chatID, message)
// 	msg.ParseMode = "Markdown"

// 	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã –Æ–∫–∞—Å—Å—ã
// 	keyboard := tgbotapi.NewInlineKeyboardMarkup(
// 		tgbotapi.NewInlineKeyboardRow(
// 			tgbotapi.NewInlineKeyboardButtonURL("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", confirmationURL),
// 		),
// 	)
// 	msg.ReplyMarkup = keyboard

// 	_, err = bot.Send(msg)
// 	return err
// }

// // –î–ª—è VPN —É—Å–ª—É–≥–∏
// func (y *YooKassaClient) SendVPNPayment(bot *tgbotapi.BotAPI, chatID int64, userEmail string) error {
// 	return y.sendYooKassaPaymentButton(bot, chatID, 1.00,
// 		"VPN Premium - –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π", userEmail)
// }
