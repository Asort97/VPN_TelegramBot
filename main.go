package main

import (
	"fmt"
	"html"
	"log"
	"net/mail"
	"os"
	"strconv"
	"strings"
	"time"

	instruct "github.com/Asort97/vpnBot/clients/instruction"
	pfsense "github.com/Asort97/vpnBot/clients/pfSense"
	sqlite "github.com/Asort97/vpnBot/clients/sqLite"
	yookassa "github.com/Asort97/vpnBot/clients/yooKassa"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const startText = `
–ü—Ä–∏–≤–µ—Ç! <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HappyCat VPN</b> üò∫üîê

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
‚Ä¢ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN.
‚Ä¢ –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤.
‚Ä¢ –ù–∞–π—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.
‚Ä¢ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 24/7.

–ì–æ—Ç–æ–≤? –í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏ –ø–æ–µ—Ö–∞–ª–∏! üöÄ
`

var lastActionKey = make(map[int64]map[string]time.Time)

var yookassaClient *yookassa.YooKassaClient
var sqliteClient *sqlite.Store
var privacyURL string

// pfSense async job dispatcher to run heavy revoke/unrevoke in background
type pfOpType int

const (
	pfOpRevoke pfOpType = iota
	pfOpUnrevoke
)

type pfJob struct {
	op      pfOpType
	certRef string
}

var (
	pfJobs         chan pfJob
	pfClientGlobal *pfsense.PfSenseClient
)

func startPfWorkers(client *pfsense.PfSenseClient, concurrency int) {
	if concurrency < 1 {
		concurrency = 1
	}
	pfClientGlobal = client
	// buffered queue to avoid blocking bot handlers
	pfJobs = make(chan pfJob, 256)
	for i := 0; i < concurrency; i++ {
		workerID := i + 1
		go func() {
			for job := range pfJobs {
				switch job.op {
				case pfOpRevoke:
					if err := client.RevokeCertificate(job.certRef); err != nil {
						log.Printf("[pfWorker %d] revoke %s error: %v", workerID, job.certRef, err)
					}
				case pfOpUnrevoke:
					if err := client.UnrevokeCertificate(job.certRef); err != nil {
						log.Printf("[pfWorker %d] unrevoke %s error: %v", workerID, job.certRef, err)
					}
				}
			}
		}()
	}
}

// Non-blocking scheduling helpers
func scheduleRevoke(certRef string) {
	if certRef == "" {
		return
	}
	select {
	case pfJobs <- pfJob{op: pfOpRevoke, certRef: certRef}:
	default:
		// Fallback: run in separate goroutine to avoid blocking
		go func(ref string) {
			if pfClientGlobal == nil {
				return
			}
			if err := pfClientGlobal.RevokeCertificate(ref); err != nil {
				log.Printf("[pfFallback] revoke %s error: %v", ref, err)
			}
		}(certRef)
	}
}

func scheduleUnrevoke(certRef string) {
	if certRef == "" {
		return
	}
	select {
	case pfJobs <- pfJob{op: pfOpUnrevoke, certRef: certRef}:
	default:
		go func(ref string) {
			if pfClientGlobal == nil {
				return
			}
			if err := pfClientGlobal.UnrevokeCertificate(ref); err != nil {
				log.Printf("[pfFallback] unrevoke %s error: %v", ref, err)
			}
		}(certRef)
	}
}

type SessionState string

const (
	stateMenu         SessionState = "menu"
	stateGetVPN       SessionState = "get_vpn"
	stateTopUp        SessionState = "top_up"
	stateTrial        SessionState = "trial"
	stateStatus       SessionState = "status"
	stateSupport      SessionState = "support"
	stateInstructions SessionState = "instructions"
	stateChooseRate   SessionState = "choose_rate"
	stateCollectEmail SessionState = "collect_email"
	stateEditEmail    SessionState = "edit_email"
)

// RatePlan –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–∞—Ä–∏—Ñ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å.
type RatePlan struct {
	ID          string
	Title       string
	Amount      float64
	Days        int
	Description string
}

// ratePlans —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–º–µ–Ω—è–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ü–µ–Ω—ã.
var ratePlans = []RatePlan{
	{ID: "15d", Title: "15 –¥–Ω–µ–π", Amount: 25, Days: 15, Description: "–ò–¥–µ–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –∏–ª–∏ —É–µ—Ö–∞—Ç—å –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è."},
	{ID: "30d", Title: "30 –¥–Ω–µ–π", Amount: 50, Days: 30, Description: "–ò–¥–µ–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –∏–ª–∏ —É–µ—Ö–∞—Ç—å –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è."},
	{ID: "60d", Title: "60 –¥–Ω–µ–π", Amount: 100, Days: 60, Description: "–ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."},
	{ID: "120d", Title: "120 –¥–Ω–µ–π", Amount: 200, Days: 120, Description: "–ü–æ–ª—É–≥–æ–¥–æ–≤–æ–π —Ç–∞—Ä–∏—Ñ —Å–æ —Å–∫–∏–¥–∫–æ–π –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø–æ–º–µ—Å—è—á–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π."},
	{ID: "240d", Title: "240 –¥–Ω–µ–π", Amount: 300, Days: 240, Description: "–ü–æ–ª—É–≥–æ–¥–æ–≤–æ–π —Ç–∞—Ä–∏—Ñ —Å–æ —Å–∫–∏–¥–∫–æ–π –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø–æ–º–µ—Å—è—á–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π."},
	{ID: "365d", Title: "365 –¥–Ω–µ–π", Amount: 400, Days: 365, Description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç—Å—è VPN –∫—Ä—É–≥–ª—ã–π –≥–æ–¥."},
}

var ratePlanByID = func() map[string]RatePlan {
	result := make(map[string]RatePlan)
	for _, plan := range ratePlans {
		result[plan.ID] = plan
	}
	return result
}()

type userState struct {
	TelegramUser string
	UserID       string
	UserExists   bool
	CertID       string
	CertRefID    string
	CertName     string
	CertExpireAt string
	CertExpired  bool
	CertDays     int
}

func fetchUserState(pfsenseClient *pfsense.PfSenseClient, telegramUser string) (userState, error) {
	state := userState{TelegramUser: telegramUser}

	userIDStr, exists := pfsenseClient.IsUserExist(telegramUser)
	if !exists {
		return state, nil
	}

	state.UserExists = true
	state.UserID = userIDStr

	userIDFromCert, certRefID, err := pfsenseClient.GetAttachedCertRefIDByUserName(telegramUser)
	if userIDFromCert != "" {
		state.UserID = userIDFromCert
	}
	if certRefID == "" || err != nil {
		return state, nil
	}

	state.CertRefID = certRefID

	certID, certName, err := pfsenseClient.GetCertificateIDByRefid(certRefID)
	if err != nil {
		return state, nil
	}
	state.CertID = certID
	state.CertName = certName
	state.CertDays = extractDaysFromCertName(certName)

	_, expiresAt, _, expired, err := pfsenseClient.GetDateOfCertificate(certID)
	if err != nil {
		return state, err
	}

	state.CertExpireAt = expiresAt
	state.CertExpired = expired
	return state, nil
}

func ensureVPNUser(pfsenseClient *pfsense.PfSenseClient, telegramUser string) (string, error) {
	userIDStr, exists := pfsenseClient.IsUserExist(telegramUser)
	if exists {
		return userIDStr, nil
	}

	return pfsenseClient.CreateUser(telegramUser, "123", "", "", false)
}

const certificateLifetimeDays = 3650

func createAndAttachCertificate(pfsenseClient *pfsense.PfSenseClient, telegramUser string, userID string) (string, string, error) {
	certName := fmt.Sprintf("Cert%s_permanent", telegramUser)

	if existingRefID, existingID, err := pfsenseClient.GetCertificateIDByName(certName); err == nil {
		if err := pfsenseClient.AttachCertificateToUser(userID, existingRefID); err != nil {
			return "", "", err
		}
		_, expiresAt, _, _, err := pfsenseClient.GetDateOfCertificate(existingID)
		if err != nil {
			return "", "", err
		}
		return existingRefID, expiresAt, nil
	}

	uuid, err := pfsenseClient.GetCARef()
	if err != nil {
		return "", "", err
	}

	certID, certRefID, err := pfsenseClient.CreateCertificate(certName, uuid, "RSA", 2048, certificateLifetimeDays, "", "sha256", telegramUser)
	if err != nil {
		return "", "", err
	}

	if err := pfsenseClient.AttachCertificateToUser(userID, certRefID); err != nil {
		return "", "", err
	}

	_, expiresAt, _, _, err := pfsenseClient.GetDateOfCertificate(certID)
	if err != nil {
		return "", "", err
	}

	return certRefID, expiresAt, nil
}

func ensureUserCertificate(pfsenseClient *pfsense.PfSenseClient, telegramUser string) (string, string, string, error) {
	state, err := fetchUserState(pfsenseClient, telegramUser)
	if err != nil {
		return "", "", "", err
	}

	userID := state.UserID
	if !state.UserExists || userID == "" {
		userID, err = ensureVPNUser(pfsenseClient, telegramUser)
		if err != nil {
			return "", "", "", err
		}
	}

	certRefID := state.CertRefID
	certID := state.CertID
	expiresAt := state.CertExpireAt

	if certRefID == "" {
		if ref, getErr := sqliteClient.GetCertRef(telegramUser); getErr == nil && ref != "" {
			certRefID = ref
		}
	}

	if certRefID != "" && certID == "" {
		if id, _, getErr := pfsenseClient.GetCertificateIDByRefid(certRefID); getErr == nil {
			certID = id
		} else {
			log.Printf("GetCertificateIDByRefid error: %v", getErr)
			certRefID = ""
		}
	}

	createdNew := false
	if certRefID == "" {
		certRefID, expiresAt, err = createAndAttachCertificate(pfsenseClient, telegramUser, userID)
		if err != nil {
			return "", "", "", err
		}
		createdNew = true
	} else {
		if err := pfsenseClient.AttachCertificateToUser(userID, certRefID); err != nil {
			return "", "", "", err
		}
		if expiresAt == "" {
			if certID == "" {
				if id, _, getErr := pfsenseClient.GetCertificateIDByRefid(certRefID); getErr == nil {
					certID = id
				} else {
					log.Printf("GetCertificateIDByRefid error: %v", getErr)
				}
			}
			if certID != "" {
				if _, expires, _, _, getErr := pfsenseClient.GetDateOfCertificate(certID); getErr == nil {
					expiresAt = expires
				} else {
					log.Printf("GetDateOfCertificate error: %v", getErr)
				}
			}
		}
	}

	if err := sqliteClient.SetCertRef(telegramUser, certRefID); err != nil {
		log.Printf("sqliteClient.SetCertRef error: %v", err)
	}

	if expiresAt == "" && !createdNew {
		if certID == "" {
			if id, _, getErr := pfsenseClient.GetCertificateIDByRefid(certRefID); getErr == nil {
				certID = id
			}
		}
		if certID != "" {
			if _, expires, _, _, getErr := pfsenseClient.GetDateOfCertificate(certID); getErr == nil {
				expiresAt = expires
			} else {
				log.Printf("GetDateOfCertificate error: %v", getErr)
			}
		}
	}

	return certRefID, expiresAt, userID, nil
}

func issuePlanCertificate(bot *tgbotapi.BotAPI, chatID int64, session *UserSession, plan RatePlan, pfsenseClient *pfsense.PfSenseClient, telegramUser string, numericUserID int64) error {
	certRefID, _, _, err := ensureUserCertificate(pfsenseClient, telegramUser)
	if err != nil {
		return err
	}

	if plan.Days > 0 {
		if err := sqliteClient.AddDays(telegramUser, int64(plan.Days)); err != nil {
			log.Printf("sqliteClient.AddDays error: %v", err)
		}
	}

	// Run unrevoke asynchronously to avoid blocking
	scheduleUnrevoke(certRefID)

	return sendCertificate(certRefID, telegramUser, chatID, plan.Days, numericUserID, pfsenseClient, bot, session)
}
func resolvePlanFromMetadata(meta map[string]interface{}, session *UserSession) RatePlan {
	plan := RatePlan{}

	if meta != nil {
		if v, ok := meta["plan_id"]; ok {
			id := fmt.Sprint(v)
			plan.ID = id
			if preset, ok := ratePlanByID[id]; ok {
				plan = preset
			}
		}

		if plan.Title == "" {
			if v, ok := meta["plan_title"]; ok {
				plan.Title = fmt.Sprint(v)
			} else if v, ok := meta["product"]; ok {
				plan.Title = fmt.Sprint(v)
			}
		}

		if plan.Days == 0 {
			if v, ok := meta["plan_days"]; ok {
				switch value := v.(type) {
				case float64:
					plan.Days = int(value)
				case string:
					if n, err := strconv.Atoi(value); err == nil {
						plan.Days = n
					}
				}
			}
		}

		if plan.Amount == 0 {
			if v, ok := meta["plan_amount"]; ok {
				switch value := v.(type) {
				case float64:
					plan.Amount = value
				case string:
					if n, err := strconv.ParseFloat(value, 64); err == nil {
						plan.Amount = n
					}
				}
			}
		}
	}

	if plan.ID != "" {
		if preset, ok := ratePlanByID[plan.ID]; ok {
			if plan.Title == "" {
				plan.Title = preset.Title
			}
			if plan.Days == 0 {
				plan.Days = preset.Days
			}
			if plan.Amount == 0 {
				plan.Amount = preset.Amount
			}
		}
	}

	if plan.Days == 0 && plan.Title != "" {
		plan.Days = extractDaysFromCertName(plan.Title)
	}

	if plan.Days == 0 && session != nil && session.PendingPlanID != "" {
		if preset, ok := ratePlanByID[session.PendingPlanID]; ok {
			if plan.ID == "" {
				plan.ID = preset.ID
			}
			if plan.Title == "" {
				plan.Title = preset.Title
			}
			plan.Days = preset.Days
			if plan.Amount == 0 {
				plan.Amount = preset.Amount
			}
		}
	}

	if plan.Days == 0 {
		plan.Days = 30
	}

	if plan.ID == "" && session != nil && session.PendingPlanID != "" {
		plan.ID = session.PendingPlanID
	}

	if plan.Title == "" && plan.ID != "" {
		if preset, ok := ratePlanByID[plan.ID]; ok {
			plan.Title = preset.Title
			if plan.Amount == 0 {
				plan.Amount = preset.Amount
			}
		} else {
			plan.Title = fmt.Sprintf("–ü–∞–∫–µ—Ç %s", plan.ID)
		}
	}

	if plan.Amount == 0 && plan.ID != "" {
		if preset, ok := ratePlanByID[plan.ID]; ok {
			plan.Amount = preset.Amount
		}
	}

	return plan
}

func extractDaysFromCertName(name string) int {
	if name == "" {
		return 0
	}
	idx := strings.LastIndex(name, "_")
	if idx == -1 || idx+1 >= len(name) {
		return 0
	}
	suffix := name[idx+1:]
	digits := strings.Builder{}
	for _, r := range suffix {
		if r >= '0' && r <= '9' {
			digits.WriteRune(r)
		}
	}
	if digits.Len() == 0 {
		return 0
	}
	value, err := strconv.Atoi(digits.String())
	if err != nil {
		return 0
	}
	return value
}

type UserSession struct {
	MessageID     int
	State         SessionState
	ContentType   string
	PendingPlanID string
}

var userSessions = make(map[int64]*UserSession)

func canProceedKey(userID int64, key string, interval time.Duration) bool {
	now := time.Now()
	if lastActionKey[userID] == nil {
		lastActionKey[userID] = make(map[string]time.Time)
	}
	if t, ok := lastActionKey[userID][key]; ok {
		if now.Sub(t) < interval {
			return false
		}
	}
	lastActionKey[userID][key] = now
	return true
}

func getSession(chatID int64) *UserSession {
	if session, ok := userSessions[chatID]; ok {
		return session
	}
	session := &UserSession{}
	userSessions[chatID] = session
	return session
}

func updateSessionText(bot *tgbotapi.BotAPI, chatID int64, session *UserSession, state SessionState, text string, parseMode string, keyboard tgbotapi.InlineKeyboardMarkup) error {
	if session.MessageID != 0 {
		edit := tgbotapi.NewEditMessageTextAndMarkup(chatID, session.MessageID, text, keyboard)
		if parseMode != "" {
			edit.ParseMode = parseMode
		}
		edit.DisableWebPagePreview = true
		if _, err := bot.Send(edit); err == nil {
			instruct.ResetState(chatID)
			session.State = state
			session.ContentType = "text"
			return nil
		}
	}
	return replaceSessionWithText(bot, chatID, session, state, text, parseMode, keyboard)
}

func replaceSessionWithText(bot *tgbotapi.BotAPI, chatID int64, session *UserSession, state SessionState, text string, parseMode string, keyboard tgbotapi.InlineKeyboardMarkup) error {
	if session.MessageID != 0 {
		_, _ = bot.Send(tgbotapi.NewDeleteMessage(chatID, session.MessageID))
	}
	instruct.ResetState(chatID)
	msg := tgbotapi.NewMessage(chatID, text)
	if parseMode != "" {
		msg.ParseMode = parseMode
	}
	msg.ReplyMarkup = keyboard
	msg.DisableWebPagePreview = true

	sent, err := bot.Send(msg)
	if err != nil {
		return err
	}

	session.MessageID = sent.MessageID
	session.State = state
	session.ContentType = "text"
	return nil
}

func replaceSessionWithDocument(bot *tgbotapi.BotAPI, chatID int64, session *UserSession, state SessionState, file tgbotapi.FileBytes, caption string, parseMode string, keyboard tgbotapi.InlineKeyboardMarkup) error {
	if session.MessageID != 0 {
		_, _ = bot.Send(tgbotapi.NewDeleteMessage(chatID, session.MessageID))
	}
	instruct.ResetState(chatID)

	doc := tgbotapi.NewDocument(chatID, file)
	doc.Caption = caption
	if parseMode != "" {
		doc.ParseMode = parseMode
	}
	doc.ReplyMarkup = keyboard

	sent, err := bot.Send(doc)
	if err != nil {
		return err
	}

	session.MessageID = sent.MessageID
	session.State = state
	session.ContentType = "document"
	return nil
}

func mainMenuInlineKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîê –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN", "nav_get_vpn"),
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "nav_topup"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "nav_status"),
			tgbotapi.NewInlineKeyboardButtonData("üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", "nav_referral"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "nav_instructions"),
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "nav_support"),
		),
	)
}

func instructionsMenuKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üíª Windows", "windows"),
			tgbotapi.NewInlineKeyboardButtonData("üì± Android", "android"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üçé iOS", "ios"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "nav_menu"),
		),
	)
}

func singleBackKeyboard(target string) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", target),
		),
	)
}

func rateSelectionKeyboard() tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton
	var currentRow []tgbotapi.InlineKeyboardButton

	for _, plan := range ratePlans {
		// –ù–∞ –∫–Ω–æ–ø–∫–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—É ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–µ—Ä—Ö—É –æ–±—ä—è—Å–Ω—è–µ—Ç, —á–µ–º—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω–∞
		label := fmt.Sprintf("%.0f ‚ÇΩ", plan.Amount)
		btn := tgbotapi.NewInlineKeyboardButtonData(label, "rate_"+plan.ID)
		currentRow = append(currentRow, btn)

		// –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
		if len(currentRow) == 3 {
			rows = append(rows, currentRow)
			currentRow = nil
		}
	}

	// –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
	if len(currentRow) > 0 {
		rows = append(rows, currentRow)
	}

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤—Å–µ–≥–¥–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "nav_menu"),
	))
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func showRateSelection(bot *tgbotapi.BotAPI, chatID int64, session *UserSession, intro string) error {
	session.PendingPlanID = ""
	// –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: "—Ü–µ–Ω–∞ -> –¥–Ω–∏" –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ.
	var lines []string
	for _, p := range ratePlans {
		// –ï—â—ë –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: "25‚ÇΩ‚Üí15–¥." (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
		lines = append(lines, fmt.Sprintf("%.0f‚ÇΩ‚Üí%d–¥.", p.Amount, p.Days))
	}

	var header string
	if strings.TrimSpace(intro) != "" {
		// –ï—Å–ª–∏ –µ—Å—Ç—å intro (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–∞–ª–∞–Ω—Å), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∫–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
		header = intro + "\n\nüí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</b>\n\n" + strings.Join(lines, "\n") + "\n\n"
	} else {
		header = "üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</b>\n\n" + strings.Join(lines, "\n") + "\n\n"
	}

	message := header + "‚ö°Ô∏è <i>–ß–µ–º –¥–æ–ª—å—à–µ –ø–µ—Ä–∏–æ–¥ ‚Äî —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ!</i>"

	return updateSessionText(bot, chatID, session, stateChooseRate, message, "HTML", rateSelectionKeyboard())
}

func ackCallback(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery, text string) {
	cfg := tgbotapi.CallbackConfig{CallbackQueryID: cq.ID}
	if text != "" {
		cfg.Text = text
	}
	bot.Request(cfg)
}

func composeMenuText() string {
	trimmed := strings.TrimSpace(startText)
	if trimmed == "" {
		return "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ."
	}
	return trimmed + "\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:</b>"
}

func main() {
	pfsenseApiKey := os.Getenv("PFSENSE_API_KEY")
	yookassaApiKey := os.Getenv("YOOKASSA_API_KEY")
	yookassaStoreID := os.Getenv("YOOKASSA_STORE_ID")
	botToken := os.Getenv("TG_BOT_TOKEN")
	tlsKey := os.Getenv("TLS_CRYPT_KEY")
	privacyURL = os.Getenv("PRIVACY_URL")
	tlsBytes, _ := os.ReadFile(tlsKey)

	pfsenseClient := pfsense.New(pfsenseApiKey, []byte(tlsBytes))
	yookassaClient = yookassa.New(yookassaStoreID, yookassaApiKey)
	sqliteClient = sqlite.New("database/data.json")

	// Start pfSense async workers (do not block bot on revoke/unrevoke)
	startPfWorkers(pfsenseClient, 5)
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	go dailyDeductWorker(sqliteClient, bot, pfsenseClient)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.PreCheckoutQuery != nil {
			handlePreCheckout(bot, update.PreCheckoutQuery)
			continue
		}

		if msg := update.Message; msg != nil {
			// handle admin commands safely only when message is present
			if msg.Text == "/revoke" {
				// example: schedule a test revoke without blocking
				scheduleRevoke("68b043fdeeb8d")
				continue
			}
			if msg.Text == "/unrevoke" {
				// example: schedule a test unrevoke without blocking
				scheduleUnrevoke("68b043fdeeb8d")
				continue
			}

			handleIncomingMessage(bot, msg, pfsenseClient)
			continue
		}

		if cq := update.CallbackQuery; cq != nil && cq.Message != nil {
			handleCallback(bot, cq, pfsenseClient)
		}
	}
}

func revokeAllCertificates(certs []string, _ *pfsense.PfSenseClient) {
	// Schedule all revokes asynchronously; don't block caller
	for _, ref := range certs {
		if strings.TrimSpace(ref) == "" {
			continue
		}
		scheduleRevoke(ref)
	}
	// No waiting here; workers will process in background
}

func handleIncomingMessage(bot *tgbotapi.BotAPI, msg *tgbotapi.Message, pfsenseClient *pfsense.PfSenseClient) {
	chatID := msg.Chat.ID
	session := getSession(chatID)

	if msg.SuccessfulPayment != nil {
		plan, ok := ratePlanByID[session.PendingPlanID]
		if !ok {
			log.Printf("successful payment received but plan is unknown")
			_ = updateSessionText(bot, chatID, session, stateTopUp, "‚ùå –ù–µ –Ω–∞—à–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", "", singleBackKeyboard("nav_menu"))
			return
		}
		if err := handleSuccessfulPayment(bot, msg, pfsenseClient, plan, session); err != nil {
			log.Printf("handleSuccessfulPayment error: %v", err)
			_ = updateSessionText(bot, chatID, session, stateTopUp, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", "", singleBackKeyboard("nav_menu"))
		}
		return
	}

	if msg.IsCommand() {
		switch msg.Command() {
		case "start":
			handleStart(bot, msg, session, pfsenseClient)
		case "referral":
			handleReferralStats(bot, msg)
		case "pay":
			fakeCallback := &tgbotapi.CallbackQuery{Message: msg, From: msg.From}
			handleGetVPN(bot, fakeCallback, session, pfsenseClient)
		default:
			// ignore other commands
		}
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ e-mail –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π
	if session.State == stateCollectEmail {
		userID := strconv.FormatInt(msg.From.ID, 10)
		addr, err := mail.ParseAddress(strings.TrimSpace(msg.Text))
		if err != nil || addr.Address == "" || !strings.Contains(addr.Address, "@") {
			_ = updateSessionText(
				bot, chatID, session, stateCollectEmail,
				"‚ùå –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ e-mail. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: name@example.com",
				"HTML",
				tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonURL("üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞", getPrivacyURL()),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "nav_menu"),
					),
				),
			)
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º e-mail –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
		_ = sqliteClient.SetEmail(userID, addr.Address)
		_ = sqliteClient.AcceptPrivacy(userID, time.Now())

		// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
		planID := session.PendingPlanID
		plan, ok := ratePlanByID[planID]
		if !ok {
			_ = updateSessionText(bot, chatID, session, stateTopUp, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.", "HTML", rateSelectionKeyboard())
			return
		}
		if err := startPaymentForPlan(bot, chatID, session, plan); err != nil {
			log.Printf("startPaymentForPlan error: %v", err)
			_ = updateSessionText(bot, chatID, session, stateTopUp, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", "", singleBackKeyboard("nav_menu"))
			return
		}
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è e-mail
	if session.State == stateEditEmail {
		userID := strconv.FormatInt(msg.From.ID, 10)
		addr, err := mail.ParseAddress(strings.TrimSpace(msg.Text))
		if err != nil || addr.Address == "" || !strings.Contains(addr.Address, "@") {
			_ = updateSessionText(
				bot, chatID, session, stateEditEmail,
				"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail.",
				"HTML",
				tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", "nav_status"),
					),
				),
			)
			return
		}

		_ = sqliteClient.SetEmail(userID, addr.Address)

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ç—É—Å—É –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		handleStatusDirect(bot, chatID, session, pfsenseClient, int(msg.From.ID))
		return
	}
}

func handleStart(bot *tgbotapi.BotAPI, msg *tgbotapi.Message, session *UserSession, pfsenseClient *pfsense.PfSenseClient) {
	chatID := msg.Chat.ID
	userID := strconv.FormatInt(msg.From.ID, 10)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	isNew := sqliteClient.IsNewUser(userID)

	// –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥)
	args := msg.CommandArguments()
	referrerID := ""
	if args != "" && strings.HasPrefix(args, "ref_") {
		referrerID = strings.TrimPrefix(args, "ref_")
	}

	// –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	if isNew {
		// –î–∞–µ–º 7 –¥–Ω–µ–π –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		if err := sqliteClient.AddDays(userID, 7); err != nil {
			log.Printf("AddDays error for new user %s: %v", userID, err)
		} else {
			log.Printf("New user %s received 7 days welcome bonus", userID)
		}

		// –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
		if referrerID != "" && referrerID != userID {
			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
			if err := sqliteClient.RecordReferral(userID, referrerID); err != nil {
				log.Printf("RecordReferral error: %v", err)
			} else {
				// –î–∞–µ–º 15 –¥–Ω–µ–π –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
				if err := sqliteClient.AddDays(referrerID, 15); err != nil {
					log.Printf("AddDays error for referrer %s: %v", referrerID, err)
				} else {
					log.Printf("Referrer %s received 15 days bonus", referrerID)

					// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
					referrerChatID, _ := strconv.ParseInt(referrerID, 10, 64)
					notifyMsg := tgbotapi.NewMessage(referrerChatID, "üéâ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 15 –¥–Ω–µ–π.")
					notifyMsg.ParseMode = "HTML"
					bot.Send(notifyMsg)

					// –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
					sendMessageToAdmin(
						fmt.Sprintf("üéÅ –ù–æ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n‚Ä¢ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π: %s\n‚Ä¢ –ë–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É: +15 –¥–Ω–µ–π", userID, referrerID),
						msg.From.UserName,
						bot,
						msg.From.ID,
					)
				}
			}

			// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
			welcomeText := startText + "\n\nüéÅ <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ 7 –¥–Ω–µ–π –≤ –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!</b>"
			if err := updateSessionText(bot, chatID, session, stateMenu, welcomeText+"\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:</b>", "HTML", mainMenuInlineKeyboard()); err != nil {
				log.Printf("updateSessionText error: %v", err)
			}
			return
		}

		// –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
		welcomeText := startText + "\n\nüéÅ <b>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</b>"
		if err := updateSessionText(bot, chatID, session, stateMenu, welcomeText+"\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:</b>", "HTML", mainMenuInlineKeyboard()); err != nil {
			log.Printf("updateSessionText error: %v", err)
		}
		return
	}

	// –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
	if err := showMainMenu(bot, chatID, session); err != nil {
		log.Printf("showMainMenu error: %v", err)
	}
}

func handleReferralStats(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	userID := strconv.FormatInt(msg.From.ID, 10)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
	botUsername := bot.Self.UserName
	referralLink := fmt.Sprintf("https://t.me/%s?start=ref_%s", botUsername, userID)

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	referralsCount := sqliteClient.GetReferralsCount(userID)

	statsText := fmt.Sprintf(`üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
<code>%s</code>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–Ω–µ–π: %d

üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>
‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>15 –¥–Ω–µ–π</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
‚Ä¢ –í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç <b>7 –¥–Ω–µ–π</b> –≤ –ø–æ–¥–∞—Ä–æ–∫

–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!`, referralLink, referralsCount, referralsCount*15)

	reply := tgbotapi.NewMessage(chatID, statsText)
	reply.ParseMode = "HTML"
	bot.Send(reply)
}

func handleCallback(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery, pfsenseClient *pfsense.PfSenseClient) {
	chatID := cq.Message.Chat.ID
	session := getSession(chatID)
	data := cq.Data
	ackText := ""

	switch {
	case data == "nav_menu":
		if err := showMainMenu(bot, chatID, session); err != nil {
			log.Printf("showMainMenu error: %v", err)
		}
	case data == "nav_get_vpn":
		handleGetVPN(bot, cq, session, pfsenseClient)
	case data == "nav_topup":
		handleTopUp(bot, cq, session, pfsenseClient)
	case data == "nav_status":
		handleStatus(bot, cq, session, pfsenseClient)
	case data == "edit_email":
		handleEditEmail(bot, cq, session)
	case data == "nav_referral":
		handleReferralCallback(bot, cq, session)
	case data == "nav_support":
		handleSupport(bot, cq, session)
	case data == "nav_instructions":
		handleInstructionsMenu(bot, cq, session)
	case data == "windows":
		handleInstructionSelection(bot, cq, session, instruct.Windows)
	case data == "android":
		handleInstructionSelection(bot, cq, session, instruct.Android)
	case data == "ios":
		handleInstructionSelection(bot, cq, session, instruct.IOS)
	case strings.HasPrefix(data, "win_prev_"):
		step, _ := strconv.Atoi(strings.TrimPrefix(data, "win_prev_"))
		instruct.InstructionWindows(chatID, bot, step-1)
	case strings.HasPrefix(data, "win_next_"):
		step, _ := strconv.Atoi(strings.TrimPrefix(data, "win_next_"))
		instruct.InstructionWindows(chatID, bot, step+1)
	case strings.HasPrefix(data, "android_prev_"):
		step, _ := strconv.Atoi(strings.TrimPrefix(data, "android_prev_"))
		instruct.InstructionAndroid(chatID, bot, step-1)
	case strings.HasPrefix(data, "android_next_"):
		step, _ := strconv.Atoi(strings.TrimPrefix(data, "android_next_"))
		instruct.InstructionAndroid(chatID, bot, step+1)
	case strings.HasPrefix(data, "ios_prev_"):
		step, _ := strconv.Atoi(strings.TrimPrefix(data, "ios_prev_"))
		instruct.InstructionIos(chatID, bot, step-1)
	case strings.HasPrefix(data, "ios_next_"):
		step, _ := strconv.Atoi(strings.TrimPrefix(data, "ios_next_"))
		instruct.InstructionIos(chatID, bot, step+1)
	case data == "check_payment":
		handleCheckPayment(bot, cq, session, pfsenseClient)
	case strings.HasPrefix(data, "rate_"):
		planID := strings.TrimPrefix(data, "rate_")
		if plan, ok := ratePlanByID[planID]; ok {
			handleRateSelection(bot, cq, session, plan, pfsenseClient)
			return
		}
		ackText = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ"
	default:
		// ignore
	}

	ackCallback(bot, cq, ackText)
}

func dailyDeductWorker(store *sqlite.Store, bot *tgbotapi.BotAPI, pfsenseClient *pfsense.PfSenseClient) {
	const (
		checkInterval   = time.Hour
		consumptionStep = 24 * time.Hour
	)

	ticker := time.NewTicker(checkInterval) // —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
	defer ticker.Stop()

	for range ticker.C {
		users := store.GetAllUsers()
		now := time.Now().UTC()

		var certsToRevoke []string

		for userID, userData := range users {
			if userData.Days <= 0 {
				continue
			}

			lastDeduct, err := time.Parse(time.RFC3339, userData.LastDeduct)
			if err != nil {
				log.Printf("invalid lastDeduct for user %s: %v", userID, err)
				continue
			}

			elapsed := now.Sub(lastDeduct)
			if elapsed < consumptionStep {
				continue
			}

			daysToCharge := int64(elapsed / consumptionStep)
			if daysToCharge <= 0 {
				continue
			}

			nextCheckpoint := lastDeduct.Add(time.Duration(daysToCharge) * consumptionStep)
			remaining, err := store.ConsumeDays(userID, daysToCharge, nextCheckpoint)
			if err != nil {
				log.Printf("failed to deduct %d day(s) for user %s: %v", daysToCharge, userID, err)
				continue
			}

			log.Printf("deducted %d day(s) from user %s (remaining: %d)", daysToCharge, userID, remaining)

			if remaining == 0 {
				certRef, err := store.GetCertRef(userID)
				if err != nil {
					log.Printf("failed to find certref of user %s: %v", userID, err)
					continue
				}
				if certRef != "" {
					certsToRevoke = append(certsToRevoke, certRef)
				}

				chatID, err := strconv.ParseInt(userID, 10, 64)
				if err != nil {
					log.Printf("failed to parse chat id %s: %v", userID, err)
					continue
				}
				notifyUserSubscriptionExpired(bot, chatID)
			}
		}

		if len(certsToRevoke) > 0 {
			revokeAllCertificates(certsToRevoke, pfsenseClient)
		}
	}
}

func notifyUserSubscriptionExpired(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –∏—Å—á–µ—Ä–ø–∞–Ω! –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN.")
	msg.ParseMode = "HTML"
	bot.Send(msg)
}

func showMainMenu(bot *tgbotapi.BotAPI, chatID int64, session *UserSession) error {
	session.PendingPlanID = ""
	return updateSessionText(bot, chatID, session, stateMenu, composeMenuText(), "HTML", mainMenuInlineKeyboard())
}

func handleGetVPN(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery, session *UserSession, pfsenseClient *pfsense.PfSenseClient) {
	chatID := cq.Message.Chat.ID
	userID := int64(cq.From.ID)

	if !canProceedKey(userID, "get_vpn", 5*time.Second) {
		ackCallback(bot, cq, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.")
		return
	}

	waitingText := "–ì–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN..."
	if err := updateSessionText(bot, chatID, session, stateGetVPN, waitingText, "HTML", singleBackKeyboard("nav_menu")); err != nil {
		log.Printf("updateSessionText error: %v", err)
	}

	session.PendingPlanID = ""
	telegramUser := fmt.Sprint(userID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏ –¥–∞—ë–º –±–æ–Ω—É—Å
	if sqliteClient.IsNewUser(telegramUser) {
		if err := sqliteClient.AddDays(telegramUser, 7); err != nil {
			log.Printf("AddDays error for new user %s: %v", telegramUser, err)
		} else {
			log.Printf("New user %s received 7 days welcome bonus via GetVPN", telegramUser)
		}
	}

	certRefID, _, _, err := ensureUserCertificate(pfsenseClient, telegramUser)
	if err != nil {
		log.Printf("ensureUserCertificate error: %v", err)
		_ = updateSessionText(bot, chatID, session, stateGetVPN, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", "", singleBackKeyboard("nav_menu"))
		return
	}

	// –ï—Å–ª–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ 0 –¥–Ω–µ–π, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Å—Ç–∞—ë—Ç—Å—è —Ä–µ–≤–æ—É–∫–Ω—É—Ç—ã–º (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
	if days, _ := sqliteClient.GetDays(telegramUser); days <= 0 {
		scheduleRevoke(certRefID)
	}

	if err := sendCertificate(certRefID, telegramUser, chatID, 0, userID, pfsenseClient, bot, session); err != nil {
		log.Printf("sendCertificate error: %v", err)
		_ = updateSessionText(bot, chatID, session, stateGetVPN, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", "", singleBackKeyboard("nav_menu"))
		return
	}

	sendMessageToAdmin(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id:%d –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–¥–∞—á—É VPN-–∫–æ–Ω—Ñ–∏–≥–∞", cq.From.ID), cq.From.UserName, bot, userID)
}

func handleTopUp(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery, session *UserSession, pfsenseClient *pfsense.PfSenseClient) {
	chatID := cq.Message.Chat.ID
	userID := int64(cq.From.ID)

	if !canProceedKey(userID, "top_up", 5*time.Second) {
		ackCallback(bot, cq, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.")
		return
	}

	telegramUser := fmt.Sprint(userID)
	currentDays, err := sqliteClient.GetDays(telegramUser)
	if err != nil {
		currentDays = 0
	}

	intro := fmt.Sprintf("–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %d –¥–Ω–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.", currentDays)
	if err := showRateSelection(bot, chatID, session, intro); err != nil {
		log.Printf("showRateSelection error: %v", err)
		_ = updateSessionText(bot, chatID, session, stateTopUp, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", "", singleBackKeyboard("nav_menu"))
		return
	}

	sendMessageToAdmin(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id:%d –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.", cq.From.ID), cq.From.UserName, bot, userID)
}

func handleStatus(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery, session *UserSession, pfsenseClient *pfsense.PfSenseClient) {
	chatID := cq.Message.Chat.ID
	userID := int64(cq.From.ID)

	if !canProceedKey(userID, "check_status", 3*time.Second) {
		ackCallback(bot, cq, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
		return
	}

	handleStatusDirect(bot, chatID, session, pfsenseClient, int(userID))
	sendMessageToAdmin(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id:%d –ø—Ä–æ–≤–µ—Ä–∏–ª —Å—Ç–∞—Ç—É—Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞", cq.From.ID), cq.From.UserName, bot, userID)
}

func handleStatusDirect(bot *tgbotapi.BotAPI, chatID int64, session *UserSession, pfsenseClient *pfsense.PfSenseClient, userID int) {
	text, err := buildStatusText(pfsenseClient, userID)
	if err != nil {
		log.Printf("buildStatusText error: %v", err)
		text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
	}
	email, _ := sqliteClient.GetEmail(strconv.Itoa(userID))
	if strings.TrimSpace(email) == "" {
		email = "‚Äî"
	}
	finalText := fmt.Sprintf(
		"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å:</b>\n"+
			"‚îú ü™™ ID: <code>%d</code>\n"+
			"‚îî ‚úâÔ∏è Mail: %s\n"+
			"%s",
		userID, email, text,
	)
	kb := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å e-mail", "edit_email"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "nav_menu"),
		),
	)
	if err := updateSessionText(bot, chatID, session, stateStatus, finalText, "HTML", kb); err != nil {
		log.Printf("updateSessionText error: %v", err)
	}
}

func handleEditEmail(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery, session *UserSession) {
	chatID := cq.Message.Chat.ID
	text := "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π e-mail –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:"
	kb := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", "nav_status"),
		),
	)
	if err := updateSessionText(bot, chatID, session, stateEditEmail, text, "HTML", kb); err != nil {
		log.Printf("updateSessionText error: %v", err)
	}
	ackCallback(bot, cq, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π e-mail")
}

func handleSupport(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery, session *UserSession) {
	chatID := cq.Message.Chat.ID
	supportText := `üìû <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ HappyCat VPN</b>

–ù–∞–ø–∏—à–∏ –Ω–∞–º –≤ Telegram: @happycatvpn
<i>–ú—ã –æ—Ç–≤–µ—á–∞–µ–º 24/7 –∏ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.</i>`

	if err := updateSessionText(bot, chatID, session, stateSupport, supportText, "HTML", singleBackKeyboard("nav_menu")); err != nil {
		log.Printf("updateSessionText error: %v", err)
	}

	sendMessageToAdmin(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id:%d –æ—Ç–∫—Ä—ã–ª —Ä–∞–∑–¥–µ–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏", cq.From.ID), cq.From.UserName, bot, int64(cq.From.ID))
}

func handleReferralCallback(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery, session *UserSession) {
	chatID := cq.Message.Chat.ID
	userID := strconv.FormatInt(cq.From.ID, 10)

	botUsername := bot.Self.UserName
	referralLink := fmt.Sprintf("https://t.me/%s?start=ref_%s", botUsername, userID)

	referralsCount := sqliteClient.GetReferralsCount(userID)

	statsText := fmt.Sprintf(`üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>

üîó <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</b>
<code>%s</code>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: %d —á–µ–ª.
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: %d –¥–Ω–µ–π

üí° <b>–£—Å–ª–æ–≤–∏—è:</b>
‚Ä¢ –í—ã: <b>+15 –¥–Ω–µ–π</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞
‚Ä¢ –î—Ä—É–≥: <b>+7 –¥–Ω–µ–π</b> –≤ –ø–æ–¥–∞—Ä–æ–∫

–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–Ω–∏!`, referralLink, referralsCount, referralsCount*15)

	if err := updateSessionText(bot, chatID, session, stateMenu, statsText, "HTML", singleBackKeyboard("nav_menu")); err != nil {
		log.Printf("updateSessionText error: %v", err)
	}
}

func handleInstructionsMenu(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery, session *UserSession) {
	chatID := cq.Message.Chat.ID
	instruct.ResetState(chatID)
	text := "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:"
	if err := updateSessionText(bot, chatID, session, stateInstructions, text, "", instructionsMenuKeyboard()); err != nil {
		log.Printf("updateSessionText error: %v", err)
	}
}

func handleRateSelection(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery, session *UserSession, plan RatePlan, pfsenseClient *pfsense.PfSenseClient) {
	chatID := cq.Message.Chat.ID
	_ = pfsenseClient

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–ª–∞—Ç–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ e-mail
	session.PendingPlanID = plan.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ e-mail
	userID := strconv.FormatInt(cq.From.ID, 10)
	if email, _ := sqliteClient.GetEmail(userID); strings.TrimSpace(email) == "" {
		text := fmt.Sprintf(
			"–£–∫–∞–∂–∏—Ç–µ e-mail, –Ω–∞–ø–∏—Å–∞–≤ –µ–≥–æ –≤ —á–∞—Ç–µ. –ü—Ä–æ–¥–æ–ª–∂–∞—è –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å <a href=\"%s\">–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à e-mail –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
			getPrivacyURL(),
		)
		kb := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞", getPrivacyURL()),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "nav_menu"),
			),
		)
		if err := updateSessionText(bot, chatID, session, stateCollectEmail, text, "HTML", kb); err != nil {
			log.Printf("updateSessionText error: %v", err)
		}
		ackCallback(bot, cq, "–í–≤–µ–¥–∏—Ç–µ e-mail")
		return
	}

	// –ï—Å–ª–∏ e-mail —É–∂–µ –µ—Å—Ç—å ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ –æ–ø–ª–∞—Ç–µ
	_ = sqliteClient.AcceptPrivacy(userID, time.Now())
	if err := startPaymentForPlan(bot, chatID, session, plan); err != nil {
		log.Printf("startPaymentForPlan error: %v", err)
		_ = updateSessionText(bot, chatID, session, stateTopUp, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", "", singleBackKeyboard("nav_menu"))
		ackCallback(bot, cq, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç")
		return
	}

	ackCallback(bot, cq, fmt.Sprintf("–°—á–µ—Ç –Ω–∞ <%s> –≥–æ—Ç–æ–≤", plan.Title))
}

func startPaymentForPlan(bot *tgbotapi.BotAPI, chatID int64, session *UserSession, plan RatePlan) error {
	metadataPlanID := plan.ID
	if metadataPlanID == "" {
		metadataPlanID = strings.ReplaceAll(strings.ToLower(plan.Title), " ", "_")
	}
	metadata := map[string]interface{}{
		"plan_id":     metadataPlanID,
		"plan_title":  plan.Title,
		"plan_days":   plan.Days,
		"plan_amount": plan.Amount,
	}

	// –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å e-mail –≤ YooKassa, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫
	email, _ := sqliteClient.GetEmail(strconv.FormatInt(chatID, 10))
	newID, replaced, err := yookassaClient.SendVPNPayment(bot, chatID, session.MessageID, plan.Amount, plan.Title, metadata, email)
	if err != nil {
		return err
	}

	if replaced && session.MessageID != 0 && session.MessageID != newID {
		_, _ = bot.Send(tgbotapi.NewDeleteMessage(chatID, session.MessageID))
	}

	session.MessageID = newID
	session.State = stateTopUp
	session.ContentType = "text"
	session.PendingPlanID = metadataPlanID

	instruct.ResetState(chatID)
	return nil
}

func handleInstructionSelection(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery, session *UserSession, t instruct.InstructType) {
	chatID := cq.Message.Chat.ID
	instruct.SetInstructKeyboard(session.MessageID, chatID, t)

	switch t {
	case instruct.Windows:
		instruct.InstructionWindows(chatID, bot, 0)
	case instruct.Android:
		instruct.InstructionAndroid(chatID, bot, 0)
	case instruct.IOS:
		instruct.InstructionIos(chatID, bot, 0)
	}

	session.State = stateInstructions
	session.ContentType = "photo"
}

func handleCheckPayment(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery, session *UserSession, pfsenseClient *pfsense.PfSenseClient) {
	chatID := cq.Message.Chat.ID
	payment, ok, err := yookassaClient.FindSucceededPayment(chatID)
	if err != nil {
		log.Printf("FindSucceededPayment error: %v", err)
		ackCallback(bot, cq, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}
	if !ok || payment == nil {
		ackCallback(bot, cq, "–ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5‚Äì10 —Å–µ–∫—É–Ω–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	// –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
	yookassaClient.ClearPayments(chatID)

	meta := payment.Metadata
	plan := resolvePlanFromMetadata(meta, session)
	if plan.Title == "" {
		ackCallback(bot, cq, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
		return
	}

	fake := &tgbotapi.Message{Chat: cq.Message.Chat, From: cq.From}

	if err := handleSuccessfulPayment(bot, fake, pfsenseClient, plan, session); err != nil {
		log.Printf("handleSuccessfulPayment error: %v", err)
		ackCallback(bot, cq, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
		return
	}

	ackCallback(bot, cq, fmt.Sprintf("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–∞—Ä–∏—Ñ ¬´%s¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", plan.Title))
}

func handlePreCheckout(bot *tgbotapi.BotAPI, pcq *tgbotapi.PreCheckoutQuery) {
	ans := tgbotapi.PreCheckoutConfig{
		PreCheckoutQueryID: pcq.ID,
		OK:                 true,
	}
	if _, err := bot.Request(ans); err != nil {
		log.Printf("precheckout answer error: %v", err)
	}
}

func handleSuccessfulPayment(bot *tgbotapi.BotAPI, msg *tgbotapi.Message, pfsenseClient *pfsense.PfSenseClient, plan RatePlan, session *UserSession) error {
	chatID := msg.Chat.ID
	userID := int64(msg.From.ID)
	telegramUser := fmt.Sprint(userID)

	waitingText := fmt.Sprintf("–ì–æ—Ç–æ–≤–∏–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ¬´%s¬ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", plan.Title)
	if err := updateSessionText(bot, chatID, session, stateTopUp, waitingText, "HTML", singleBackKeyboard("nav_menu")); err != nil {
		log.Printf("updateSessionText error: %v", err)
	}

	err := issuePlanCertificate(bot, chatID, session, plan, pfsenseClient, telegramUser, userID)
	if err != nil {
		return err
	}

	session.PendingPlanID = ""

	sendMessageToAdmin(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id:%d –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –ø–∞–∫–µ—Ç–æ–º ¬´%s¬ª", msg.From.ID, plan.Title), msg.From.UserName, bot, userID)
	return nil
}

func sendCertificate(certRefID, telegramUserID string, chatID int64, days int, userID int64, pfsenseClient *pfsense.PfSenseClient, bot *tgbotapi.BotAPI, session *UserSession) error {
	certName := fmt.Sprintf("Cert%s_permanent", telegramUserID)

	ovpnData, err := pfsenseClient.GenerateOVPN(certRefID, "", "213.21.200.205")
	if err != nil {
		return err
	}

	fileBytes := tgbotapi.FileBytes{
		Name:  certName + ".ovpn",
		Bytes: ovpnData,
	}

	caption := fmt.Sprintf("üîê <b>VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!</b>\n\nü™™ ID: <code>%d</code>", userID)

	if days > 0 {
		caption += fmt.Sprintf("\n‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: +%d –¥–Ω–µ–π", days)
	}
	if balance, err := sqliteClient.GetDays(telegramUserID); err == nil {
		caption += fmt.Sprintf("\nüí∞ –ë–∞–ª–∞–Ω—Å: %d –¥–Ω–µ–π", balance)
	}
	caption += "\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
	caption += "üí° <b>–í–∞–∂–Ω–æ:</b> –≠—Ç–æ –≤–∞—à <b>–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π</b> —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!\n"
	caption += "‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ <b>–æ–¥–∏–Ω —Ä–∞–∑</b>\n"
	caption += "‚Ä¢ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ OpenVPN\n"
	caption += "‚Ä¢ –ü—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ <b>–Ω–∏—á–µ–≥–æ –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ</b> ‚Äî VPN –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
	caption += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

	return replaceSessionWithDocument(bot, chatID, session, stateMenu, fileBytes, caption, "HTML", singleBackKeyboard("nav_menu"))
}

func buildStatusText(pfsenseClient *pfsense.PfSenseClient, userID int) (string, error) {
	telegramUser := fmt.Sprint(userID)
	_, _, err := pfsenseClient.GetAttachedCertRefIDByUserName(telegramUser)
	days, _ := sqliteClient.GetDays(strconv.Itoa(userID))

	if err != nil {
		return fmt.Sprintf(`üîí <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b>
<b>‚îú üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞</b>
<b>‚îî ‚è≥ –î–Ω–µ–π –Ω–∞ –±–∞–ª–∞–Ω—Å–µ:</b> %d
üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN.`, days), nil
	}

	if days == 0 {
		return fmt.Sprintf(`üîí <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b>
<b>‚îú üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞</b>
<b>‚îî ‚è≥ –î–Ω–µ–π –Ω–∞ –±–∞–ª–∞–Ω—Å–µ:</b> %d
üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN.`, days), nil
	}

	return fmt.Sprintf(`üîí <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b>
<b>‚îú üü¢ –ê–∫—Ç–∏–≤–Ω–∞</b>
<b>‚îî ‚è≥ –î–Ω–µ–π –Ω–∞ –±–∞–ª–∞–Ω—Å–µ:</b> %d
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å ‚Äî VPN —Ä–∞–±–æ—Ç–∞–µ—Ç!`, days), nil
}

func sendMessageToAdmin(text string, username string, bot *tgbotapi.BotAPI, id int64) {
	if id == 623290294 {
		return
	}
	var userLink string
	if username != "" {
		userLink = fmt.Sprintf("<a href=\"https://t.me/%s\">@%s</a>", html.EscapeString(username), html.EscapeString(username))
	} else {
		userLink = fmt.Sprintf("<a href=\"tg://user?id=%d\">–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>", id)
	}
	newText := fmt.Sprintf("%s:\n%s", userLink, html.EscapeString(text))
	msg := tgbotapi.NewMessage(623290294, newText)
	msg.ParseMode = "HTML"

	msg2 := tgbotapi.NewMessage(6365653009, newText)
	msg2.ParseMode = "HTML"
	bot.Send(msg)
	bot.Send(msg2)

}

// getPrivacyURL –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ü–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
func getPrivacyURL() string {
	if strings.TrimSpace(privacyURL) != "" {
		return privacyURL
	}
	// –†–µ–∑–µ—Ä–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegraph URL
	return "https://telegra.ph/HappyCat-VPN-Privacy-Policy"
}
