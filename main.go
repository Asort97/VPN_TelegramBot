package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	colorfulprint "github.com/Asort97/vpnBot/clients/colorfulPrint"
	pfsense "github.com/Asort97/vpnBot/clients/pfSense"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type InstructionState struct {
	CurrentStep int
	MessageID   int
	ChatID      int64
}

var instructionMessage tgbotapi.Message

// var instructionStates = make(map[int64]*InstructionState)
var (
	windowsStates = make(map[int64]*InstructionState)
	androidStates = make(map[int64]*InstructionState)
	iosStates     = make(map[int64]*InstructionState)
)

const startText = `
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HappyCat VPN!</b>

üîí <u>–° –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</u>
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
‚Ä¢ –ù–∞–¥—ë–∂–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞—â–∏—Ç—É –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤

üéÅ –ù–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–æ—Å—Ç—É–ø–µ–Ω <b>–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 3 –¥–Ω—è</b> ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ VPN –∏ –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –±–µ–∑ —Ä–∏—Å–∫–æ–≤!

‚û°Ô∏è –ù–∞–∂–º–∏—Ç–µ <b>¬´üÜì –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø¬ª</b>, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é!
`

var lastActionKey = make(map[int64]map[string]time.Time)

const vpnCost int = 180

func canProceedKey(userID int64, key string, interval time.Duration) bool {
	now := time.Now()
	if lastActionKey[userID] == nil {
		lastActionKey[userID] = make(map[string]time.Time)
	}
	if t, ok := lastActionKey[userID][key]; ok {
		if now.Sub(t) < interval {
			return false
		}
	}
	lastActionKey[userID][key] = now
	return true
}

func main() {
	pfsenseApiKey := os.Getenv("PFSENSE_API_KEY")
	botToken := os.Getenv("TG_BOT_TOKEN")
	tlsKey := os.Getenv("TLS_CRYPT_KEY")
	tlsBytes, _ := os.ReadFile(tlsKey)
	pfsenseClient := pfsense.New(pfsenseApiKey, []byte(tlsBytes))
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {

		if update.PreCheckoutQuery != nil {
			handlePreCheckout(bot, update.PreCheckoutQuery)
			continue
		}

		if update.Message != nil {

			if update.Message.SuccessfulPayment != nil {
				handleSuccessfulPayment(bot, update.Message, pfsenseClient)
				continue
			}

			if update.Message.IsCommand() && update.Message.Command() == "start" {
				sendStart(bot, update.Message.Chat.ID)
				// time.Sleep(1 * time.Second)

				// msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ú–µ–Ω—é –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π:")
				// msg.ReplyMarkup = menuKeyboard()
				// bot.Send(msg)
				continue
			}

			switch update.Message.Text {
			case "üîë –ü–æ–ª—É—á–∏—Ç—å VPN":
				if !canProceedKey(update.Message.From.ID, "get_vpn", 5*time.Second) {
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ~5 —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤—ã–¥–∞—á–µ–π VPN"))
					break
				}

				msgWait := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
				bot.Send(msgWait)

				telegramUserid := fmt.Sprint(update.Message.From.ID)
				_, isExist := pfsenseClient.IsUserExist(telegramUserid)

				if isExist {
					_, certRefID, err := pfsenseClient.GetAttachedCertRefIDByUserName(telegramUserid)

					if err != nil {
						createUserAndSendCertificate(update, pfsenseClient, bot)
					} else {
						certID, _ := pfsenseClient.GetCertificateIDByRefid(certRefID)
						_, _, _, expired, _ := pfsenseClient.GetDateOfCertificate(certID)
						// expired := true
						if expired {
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å VPN –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!")
							bot.Send(msg)

							_ = sendStarsInvoice(bot, update.Message.Chat.ID, vpnCost)
						} else {
							_, certDateUntil, _, _, _ := pfsenseClient.GetDateOfCertificate(certID)

							sendCertificate(certRefID, telegramUserid, certDateUntil, false, update, pfsenseClient, bot)
							// createUserAndSendCertificate(update, pfsenseClient, bot)
						}
					}
				} else {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å VPN –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!")
					bot.Send(msg)

					// amount := 250
					_ = sendStarsInvoice(bot, update.Message.Chat.ID, vpnCost)
				}

				sendMessageToAdmin(fmt.Sprintf("–Æ–∑–µ—Ä —Å id:%d –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–ª—É—á–∏—Ç—å VPN...", update.Message.From.ID), update.Message.From.UserName, bot)

				continue

			case "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
				buttons := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("ü™ü Windows", "windows"),
						tgbotapi.NewInlineKeyboardButtonData("üì± Android", "android"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üçé IOS", "ios"),
					),
				)

				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
				msg.ReplyMarkup = buttons
				instructionMessage, _ = bot.Send(msg)

				sendMessageToAdmin(fmt.Sprintf("–Æ–∑–µ—Ä —Å id:%d –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...", update.Message.From.ID), update.Message.From.UserName, bot)
				// instructionWindows(update, bot)
				continue

			case "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å":
				if !canProceedKey(update.Message.From.ID, "check_status", 3*time.Second) {
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "‚è≥ –ß—É—Ç—å –ø–æ–∑–∂–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥"))
					break
				}
				checkStatus(pfsenseClient, update, bot)

				sendMessageToAdmin(fmt.Sprintf("–Æ–∑–µ—Ä —Å id:%d –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞...", update.Message.From.ID), update.Message.From.UserName, bot)

				continue

			case "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
				supportText := `üõ†Ô∏è <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:
‚Ä¢ üîß –¢–µ–ª–µ–≥—Ä–∞–º: https://t.me/happycatvpn

‚è∞ <i>–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 24 —á–∞—Å–æ–≤</i>`

				msg := tgbotapi.NewMessage(update.Message.Chat.ID, supportText)
				msg.ParseMode = "HTML"
				bot.Send(msg)

				sendMessageToAdmin(fmt.Sprintf("–Æ–∑–µ—Ä —Å id:%d –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–¥–¥–µ—Ä–∂–∫–∏...", update.Message.From.ID), update.Message.From.UserName, bot)

				continue

			case "üÜì –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø":

				msgWait := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
				bot.Send(msgWait)

				if !canProceedKey(update.Message.From.ID, "get_vpn_trial", 5*time.Second) {
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ~5 —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤—ã–¥–∞—á–µ–π VPN"))
					break
				}

				createProbCertificate(update, pfsenseClient, bot)
				sendMessageToAdmin(fmt.Sprintf("–Æ–∑–µ—Ä —Å id:%d –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ü—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞...", update.Message.From.ID), update.Message.From.UserName, bot)

				continue

			}

			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π!:")
			msg.ReplyMarkup = menuKeyboard()
			bot.Send(msg)
		}

		if cq := update.CallbackQuery; cq != nil && cq.Message != nil {

			chatID := cq.Message.Chat.ID

			if strings.HasPrefix(cq.Data, "win_prev_") {
				// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
				currentStep, _ := strconv.Atoi(strings.TrimPrefix(cq.Data, "win_prev_"))
				newStep := currentStep - 1
				instructionWindows(chatID, bot, newStep)

			} else if strings.HasPrefix(cq.Data, "win_next_") {
				// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥"
				currentStep, _ := strconv.Atoi(strings.TrimPrefix(cq.Data, "win_next_"))
				newStep := currentStep + 1
				instructionWindows(chatID, bot, newStep)
			}

			if strings.HasPrefix(cq.Data, "android_prev_") {
				currentStep, _ := strconv.Atoi(strings.TrimPrefix(cq.Data, "android_prev_"))
				instructionAndroid(chatID, bot, currentStep-1)
			} else if strings.HasPrefix(cq.Data, "android_next_") {
				currentStep, _ := strconv.Atoi(strings.TrimPrefix(cq.Data, "android_next_"))
				instructionAndroid(chatID, bot, currentStep+1)
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ iOS
			if strings.HasPrefix(cq.Data, "ios_prev_") {
				currentStep, _ := strconv.Atoi(strings.TrimPrefix(cq.Data, "ios_prev_"))
				instructionIos(chatID, bot, currentStep-1)
			} else if strings.HasPrefix(cq.Data, "ios_next_") {
				currentStep, _ := strconv.Atoi(strings.TrimPrefix(cq.Data, "ios_next_"))
				instructionIos(chatID, bot, currentStep+1)
			}

			switch cq.Data {
			case "windows":
				instructionWindows(chatID, bot, 0)
			case "android":
				instructionAndroid(chatID, bot, 0)
			case "ios":
				instructionIos(chatID, bot, 0)
			// case "trial":
			// 	createProbCertificate(update, pfsenseClient, bot)
			case "trial":
				createProbCertificate(update, pfsenseClient, bot)
			}
			bot.Request(tgbotapi.NewCallback(cq.ID, ""))
		}
	}
}

func sendMessageToAdmin(text string, username string, bot *tgbotapi.BotAPI) {

	newText := fmt.Sprintf("@%s:\n%s", username, text)
	msg := tgbotapi.NewMessage(623290294, newText)
	bot.Send(msg)
}

func checkStatus(pfsenseClient *pfsense.PfSenseClient, update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	_, certRefID, err := pfsenseClient.GetAttachedCertRefIDByUserName(fmt.Sprint(update.Message.From.ID))
	if err != nil {
		colorfulprint.PrintError("Unable to found user %e\n", err)
	}
	certId, err := pfsenseClient.GetCertificateIDByRefid(certRefID)
	if err != nil {
		colorfulprint.PrintError(fmt.Sprintf("Unable to found certificate id:%s by refid:%s %e\n", certId, certRefID, err), err)
	} else {
		colorfulprint.PrintState(fmt.Sprintf("Founded attached cert id:%s of USER:%d and OUR ID OF CERT:%s\n", certRefID, update.Message.From.ID, certId))
	}

	from, until, daysLeft, expired, err := pfsenseClient.GetDateOfCertificate(certId)
	if err != nil {
		colorfulprint.PrintError(fmt.Sprintf("Couldnt get date of certificate{%s}\n", certId), err)
	}

	var statusIcon, statusText string
	if expired {
		statusIcon = "‚ùå"
		statusText = "–ò—Å—Ç–µ–∫–ª–∞"
	} else {
		statusIcon = "‚úÖ"
		statusText = "–ê–∫—Ç–∏–≤–Ω–∞"
	}

	text := fmt.Sprintf(`üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>

%s <b>–°—Ç–∞—Ç—É—Å:</b> %s
üìÖ <b>–ù–∞—á–∞–ª–æ:</b> %s
‚è∞ <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> %s
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
üí° –û—Å—Ç–∞–ª–æ—Å—å: %d –¥–Ω–µ–π`,
		statusIcon, statusText, from, until, daysLeft)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, text)
	msg.ParseMode = "HTML"
	bot.Send(msg)

}

func instructionWindows(chatID int64, bot *tgbotapi.BotAPI, step int) {
	steps := []struct {
		photoPath string
		caption   string
	}{
		{
			"InstructionPhotos/Windows/1.png",
			"1) –°–∫–∞—á–∞–π—Ç–µ <a href=\"https://openvpn.net/community/\">OpenVPN</a> —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞",
		},
		{
			"InstructionPhotos/Windows/2.png",
			"2) –ü–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ —Ç—Ä–µ–π –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É",
		},
		{
			"InstructionPhotos/Windows/3.png",
			"3) –ù–∞–∂–º–∏—Ç–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –ø–æ –∑–Ω–∞—á–∫—É OpenVPN –∏ –¥–∞–ª–µ–µ –ò–º–ø–æ—Ä—Ç->–ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–π –º—ã –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–º",
		},
		{
			"InstructionPhotos/Windows/4.png",
			"4) –î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –ø–æ –∑–Ω–∞—á–∫—É —Å–Ω–æ–≤–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
		},
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —à–∞–≥–æ–≤
	if step < 0 {
		step = 0
	}
	if step >= len(steps) {
		step = len(steps) - 1
	}

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
	if state, exists := windowsStates[chatID]; exists && state.MessageID != 0 {
		deleteMsg := tgbotapi.NewDeleteMessage(chatID, state.MessageID)
		bot.Send(deleteMsg)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	var row []tgbotapi.InlineKeyboardButton

	if step > 0 {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("win_prev_%d", step)))
	}

	row = append(row, tgbotapi.NewInlineKeyboardButtonData(
		fmt.Sprintf("–®–∞–≥ %d/%d", step+1, len(steps)), "win_current"))

	if step < len(steps)-1 {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", fmt.Sprintf("win_next_%d", step)))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(row)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath(steps[step].photoPath))
	photo.Caption = steps[step].caption
	photo.ParseMode = "HTML"
	photo.ReplyMarkup = keyboard

	msg, err := bot.Send(photo)
	if err != nil {
		log.Printf("Error sending photo: %v", err)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	windowsStates[chatID] = &InstructionState{
		CurrentStep: step,
		MessageID:   msg.MessageID,
		ChatID:      chatID,
	}
}

func instructionAndroid(chatID int64, bot *tgbotapi.BotAPI, step int) {
	steps := []struct {
		photoPath string
		caption   string
	}{
		{
			"",
			"1) –°–∫–∞—á–∞–π—Ç–µ <a href=\"https://play.google.com/store/apps/details?id=net.openvpn.openvpn\">OpenVPN</a> —Å GooglePlay",
		},
		{
			"InstructionPhotos/Android/1.jpg",
			"2) –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –Ω–∞–π–¥–∏—Ç–µ —Ç–∞–º —Ñ–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞",
		},
		{
			"InstructionPhotos/Android/2.jpg",
			"3) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∞–π–ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é OpenVPN",
		},
		{
			"InstructionPhotos/Android/3.jpg",
			"4) –ù–∞–∂–º–∏—Ç–µ OK –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å",
		},
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —à–∞–≥–æ–≤
	if step < 0 {
		step = 0
	}
	if step >= len(steps) {
		step = len(steps) - 1
	}

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
	if state, exists := androidStates[chatID]; exists && state.MessageID != 0 {
		deleteMsg := tgbotapi.NewDeleteMessage(chatID, state.MessageID)
		bot.Send(deleteMsg)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	var row []tgbotapi.InlineKeyboardButton

	if step > 0 {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("android_prev_%d", step)))
	}

	row = append(row, tgbotapi.NewInlineKeyboardButtonData(
		fmt.Sprintf("Android %d/%d", step+1, len(steps)), "android_current"))

	if step < len(steps)-1 {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", fmt.Sprintf("android_next_%d", step)))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(row)

	// –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ (–±–µ–∑ —Ñ–æ—Ç–æ) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if step == 0 {
		msg := tgbotapi.NewMessage(chatID, steps[step].caption)
		msg.ParseMode = "HTML"
		msg.ReplyMarkup = keyboard

		sentMsg, err := bot.Send(msg)
		if err == nil {
			androidStates[chatID] = &InstructionState{
				CurrentStep: step,
				MessageID:   sentMsg.MessageID,
				ChatID:      chatID,
			}
		}
		return
	}

	// –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath(steps[step].photoPath))
	photo.Caption = steps[step].caption
	photo.ParseMode = "HTML"
	photo.ReplyMarkup = keyboard

	msg, err := bot.Send(photo)
	if err != nil {
		log.Printf("Error sending Android photo: %v", err)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	androidStates[chatID] = &InstructionState{
		CurrentStep: step,
		MessageID:   msg.MessageID,
		ChatID:      chatID,
	}
}
func instructionIos(chatID int64, bot *tgbotapi.BotAPI, step int) {
	steps := []struct {
		photoPath string
		caption   string
	}{
		{
			"",
			"1) –°–∫–∞—á–∞–π—Ç–µ <a href=\"https://apps.apple.com/au/app/openvpn-connect/id590379981\">OpenVPN</a> —Å AppStore",
		},
		{
			"InstructionPhotos/Ios/1.jpg",
			"2) –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ",
		},
		{
			"InstructionPhotos/Ios/2.jpg",
			"3) –ù–∞–π–¥–∏—Ç–µ —Ñ–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞",
		},
		{
			"InstructionPhotos/Ios/4.png",
			"4) –û—Ç–∫—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ OpenVPN",
		},
		{
			"InstructionPhotos/Ios/5.jpg",
			"5) –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ADD –∏ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å!",
		},
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —à–∞–≥–æ–≤
	if step < 0 {
		step = 0
	}
	if step >= len(steps) {
		step = len(steps) - 1
	}

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
	if state, exists := iosStates[chatID]; exists && state.MessageID != 0 {
		deleteMsg := tgbotapi.NewDeleteMessage(chatID, state.MessageID)
		bot.Send(deleteMsg)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	var row []tgbotapi.InlineKeyboardButton

	if step > 0 {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("ios_prev_%d", step)))
	}

	row = append(row, tgbotapi.NewInlineKeyboardButtonData(
		fmt.Sprintf("iOS %d/%d", step+1, len(steps)), "ios_current"))

	if step < len(steps)-1 {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", fmt.Sprintf("ios_next_%d", step)))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(row)

	// –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ (–±–µ–∑ —Ñ–æ—Ç–æ) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if step == 0 {
		msg := tgbotapi.NewMessage(chatID, steps[step].caption)
		msg.ParseMode = "HTML"
		msg.ReplyMarkup = keyboard

		sentMsg, err := bot.Send(msg)
		if err == nil {
			iosStates[chatID] = &InstructionState{
				CurrentStep: step,
				MessageID:   sentMsg.MessageID,
				ChatID:      chatID,
			}
		}
		return
	}

	// –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath(steps[step].photoPath))
	photo.Caption = steps[step].caption
	photo.ParseMode = "HTML"
	photo.ReplyMarkup = keyboard

	msg, err := bot.Send(photo)
	if err != nil {
		log.Printf("Error sending iOS photo: %v", err)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	iosStates[chatID] = &InstructionState{
		CurrentStep: step,
		MessageID:   msg.MessageID,
		ChatID:      chatID,
	}
}

func menuKeyboard() tgbotapi.ReplyKeyboardMarkup {
	kb := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å VPN"),
			tgbotapi.NewKeyboardButton("üÜì –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø"),
			tgbotapi.NewKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
			tgbotapi.NewKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
		),
	)
	kb.ResizeKeyboard = true
	kb.OneTimeKeyboard = false
	return kb
}

func createUserAndSendCertificate(update tgbotapi.Update, pfsenseClient *pfsense.PfSenseClient, bot *tgbotapi.BotAPI) {

	telegramUserid := fmt.Sprint(update.Message.From.ID)
	certName := fmt.Sprintf("Cert%s", telegramUserid)

	var userID string
	userID, isExist := pfsenseClient.IsUserExist(telegramUserid)

	if isExist {
		fmt.Printf("User{%s} is exist and there is his id:%s!\n", telegramUserid, userID)
	} else {
		fmt.Printf("User{%s} is not exist!\n", telegramUserid)
		userID, _ = pfsenseClient.CreateUser(telegramUserid, "123", "", "", false)
	}

	var certRefID string
	var certID string

	_, certRefID, err := pfsenseClient.GetAttachedCertRefIDByUserName(telegramUserid)

	if err != nil {
		colorfulprint.PrintError(fmt.Sprintf("Couldnt find attached certificate on user{%s}\n", telegramUserid), err)

		uuid, _ := pfsenseClient.GetCARef()
		certID, certRefID, _ = pfsenseClient.CreateCertificate(certName, uuid, "RSA", 2048, 30, "", "sha256", telegramUserid)
		pfsenseClient.AttachCertificateToUser(userID, certRefID)
	} else {
		certID, _ = pfsenseClient.GetCertificateIDByRefid(certRefID)
		_, _, _, expired, _ := pfsenseClient.GetDateOfCertificate(certID)
		// expired := true
		if expired {
			// –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è !!!!!!!!!
			pfsenseClient.DeleteUserCertificate(certID)
			//–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			uuid, _ := pfsenseClient.GetCARef()
			certID, certRefID, _ = pfsenseClient.CreateCertificate(certName, uuid, "RSA", 2048, 30, "", "sha256", telegramUserid)
			pfsenseClient.AttachCertificateToUser(userID, certRefID)

			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!")
			bot.Send(msg)
		}
	}

	_, certDateUntil, _, _, _ := pfsenseClient.GetDateOfCertificate(certID)

	ovpnData, err := pfsenseClient.GenerateOVPN(certRefID, "", "213.21.200.205")
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "Error generating OVPN: "+err.Error())
		bot.Send(msg)
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ OVPN –≤ Telegram –∫–∞–∫ —Ñ–∞–π–ª
	fileBytes := tgbotapi.FileBytes{
		Name:  certName + ".ovpn",
		Bytes: ovpnData,
	}
	docMsg := tgbotapi.NewDocument(update.Message.Chat.ID, fileBytes)
	docMsg.ReplyToMessageID = update.Message.MessageID
	bot.Send(docMsg)

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å userID:{%d} –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω VPN\n–ò—Å—Ç–µ–∫–∞–µ—Ç: %s", update.Message.From.ID, certDateUntil))
	msg.ReplyToMessageID = update.Message.MessageID
	bot.Send(msg)
}

func createProbCertificate(update tgbotapi.Update, pfsenseClient *pfsense.PfSenseClient, bot *tgbotapi.BotAPI) {
	var chatID int64
	var userID int64

	if update.Message != nil {
		chatID = update.Message.Chat.ID
		userID = int64(update.Message.From.ID)
	} else if update.CallbackQuery != nil && update.CallbackQuery.Message != nil {
		chatID = update.CallbackQuery.Message.Chat.ID
		userID = int64(update.CallbackQuery.From.ID)
	} else {
		return
	}

	telegramUserid := strconv.FormatInt(userID, 10) // –æ–∫ –¥–ª—è int64

	certName := fmt.Sprintf("TrialCert%s", telegramUserid)

	var certRefID, certID string
	var err error

	certRefID, certID, err = pfsenseClient.GetCertificateIDByName(certName)
	if err != nil {
		uuid, _ := pfsenseClient.GetCARef()
		certID, certRefID, _ = pfsenseClient.CreateCertificate(certName, uuid, "RSA", 2048, 3, "", "sha256", telegramUserid)
		_, certDateUntil, _, _, _ := pfsenseClient.GetDateOfCertificate(certID)

		sendCertificate(certRefID, telegramUserid, certDateUntil, true, update, pfsenseClient, bot)
		return
	}

	_, certDateUntil, _, expired, _ := pfsenseClient.GetDateOfCertificate(certID)
	if expired {
		msg := tgbotapi.NewMessage(chatID, "–í–∞—à –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ VPN –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ –∏ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!")
		bot.Send(msg)
		return
	}

	sendCertificate(certRefID, telegramUserid, certDateUntil, true, update, pfsenseClient, bot)
}

func sendStarsInvoice(bot *tgbotapi.BotAPI, chatID int64, amountStars int) error {
	// if amountStars <= 0 {
	// 	amountStars = 1
	// }
	prices := []tgbotapi.LabeledPrice{
		{Label: "VPN Premium –Ω–∞ 30 –¥–Ω–µ–π", Amount: amountStars},
	}
	inv := tgbotapi.NewInvoice(
		chatID,
		"üîê Premium VPN –¥–æ—Å—Ç—É–ø",
		"–° –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:\nüéØ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–µ—Ä–≤–µ—Ä–∞–º\n‚ö° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\nüìû –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n‚ôæÔ∏è –õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤\nüîÑ –õ–µ–≥–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ",
		"order_"+strconv.Itoa(amountStars),
		"",
		"",
		"XTR",
		prices,
	)

	// –¥–æ–±–∞–≤—å —Å—Ç—Ä–æ–∫—É:
	inv.SuggestedTipAmounts = []int{}

	// inv.PhotoURL = "https://img.freepik.com/free-vector/secure-cloud-computing-vector-illustration_53876-76148.jpg"
	// inv.PhotoWidth = 600
	// inv.PhotoHeight = 400

	_, err := bot.Send(inv)
	return err
}

func handlePreCheckout(bot *tgbotapi.BotAPI, pcq *tgbotapi.PreCheckoutQuery) {
	// –¢—É—Ç –º–æ–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å payload/—Å—É–º–º—É/–≤–∞–ª—é—Ç—É
	ans := tgbotapi.PreCheckoutConfig{
		PreCheckoutQueryID: pcq.ID,
		OK:                 true,
		// ErrorMessage:    "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫" // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å
	}
	if _, err := bot.Request(ans); err != nil {
		log.Printf("precheckout answer error: %v", err)
	}
}

func handleSuccessfulPayment(bot *tgbotapi.BotAPI, msg *tgbotapi.Message, pfsenseClient *pfsense.PfSenseClient) {
	sp := msg.SuccessfulPayment
	if sp == nil {
		return
	}
	if sp.Currency != "XTR" {
		log.Printf("unexpected currency: %s", sp.Currency)
		return
	}
	log.Printf("paid: %d XTR, payload=%s", sp.TotalAmount, sp.InvoicePayload)

	// üëâ –∑–¥–µ—Å—å –≤—ã–¥–∞–π –¥–æ—Å—Ç—É–ø: –∑–∞–≤–µ–¥–∏ user –≤ pfSense / –∞–∫—Ç–∏–≤–∏—Ä—É–π –ø–æ–¥–ø–∏—Å–∫—É / –ø—Ä.
	// ... —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ ...
	createUserAndSendCertificate(tgbotapi.Update{Message: msg}, pfsenseClient, bot)

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	_, _ = bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º VPN... ‚úÖ"))

	sendMessageToAdmin(fmt.Sprintf("–Æ–∑–µ—Ä —Å id:%d –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ VPN!", msg.From.ID), msg.From.UserName, bot)
}

func sendCertificate(certRefID, telegramUserid, certDateUntil string, isProb bool, update tgbotapi.Update, pfsenseClient *pfsense.PfSenseClient, bot *tgbotapi.BotAPI) {

	var certName string

	if isProb {
		certName = fmt.Sprintf("TrialCert%s", telegramUserid)
	} else {
		certName = fmt.Sprintf("Cert%s", telegramUserid)
	}

	ovpnData, err := pfsenseClient.GenerateOVPN(certRefID, "", "213.21.200.205")
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "Error generating OVPN: "+err.Error())
		bot.Send(msg)
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ OVPN –≤ Telegram –∫–∞–∫ —Ñ–∞–π–ª
	fileBytes := tgbotapi.FileBytes{
		Name:  certName + ".ovpn",
		Bytes: ovpnData,
	}
	docMsg := tgbotapi.NewDocument(update.Message.Chat.ID, fileBytes)
	docMsg.ReplyToMessageID = update.Message.MessageID
	bot.Send(docMsg)

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–í–∞—à userID:{%d}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω VPN\n–ò—Å—Ç–µ–∫–∞–µ—Ç: %s", update.Message.From.ID, certDateUntil))
	msg.ReplyToMessageID = update.Message.MessageID
	bot.Send(msg)

}

func sendStart(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, startText)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = menuKeyboard()

	// if _, err := bot.Send(msg); err != nil {
	// 	log.Println("sendStart error:", err)
	// }

	var row []tgbotapi.InlineKeyboardButton
	row = append(row, tgbotapi.NewInlineKeyboardButtonData("üÜì –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø", "trial"))
	keyboard := tgbotapi.NewInlineKeyboardMarkup(row)

	msg.ReplyMarkup = keyboard

	bot.Send(msg)
}

// func sendCertificateURL(certRefID, telegramUserid, certDateUntil string, isProb bool,
// 	update tgbotapi.Update, pfsenseClient *pfsense.PfSenseClient, bot *tgbotapi.BotAPI) {

// 	var certName string
// 	if isProb {
// 		certName = fmt.Sprintf("TrialCert%s", telegramUserid)
// 	} else {
// 		certName = fmt.Sprintf("Cert%s", telegramUserid)
// 	}

// 	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ovpn
// 	ovpnData, err := pfsenseClient.GenerateOVPN(certRefID, "", "213.21.200.205")
// 	if err != nil {
// 		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ OVPN: "+err.Error())
// 		bot.Send(msg)
// 		return
// 	}

// 	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
// 	savePath := fmt.Sprintf("/var/www/certs/%s.ovpn", certName)

// 	err = os.WriteFile(savePath, ovpnData, 0600)
// 	if err != nil {
// 		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: "+err.Error())
// 		bot.Send(msg)
// 		return
// 	}

// 	// –§–æ—Ä–º–∏—Ä—É–µ–º URL (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –¥–æ–º–µ–Ω!)
// 	url := fmt.Sprintf("http://213.21.200.208/certs/%s.ovpn", certName)

// 	// OpenVPN-–ª–∏–Ω–∫
// 	openvpnURL := fmt.Sprintf("openvpn://import-config?url=%s", url)

// 	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
// 	text := fmt.Sprintf(
// 		"‚úÖ –í–∞—à VPN –≥–æ—Ç–æ–≤!\n–ò—Å—Ç–µ–∫–∞–µ—Ç: %s\n\n–°—Å—ã–ª–∫–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:\n%s\n\n–ï—Å–ª–∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Å–∫–∞—á–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥ —Ç—É—Ç:\n%s",
// 		certDateUntil, openvpnURL, url,
// 	)

// 	msg := tgbotapi.NewMessage(update.Message.Chat.ID, text)
// 	bot.Send(msg)
// }
