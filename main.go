package main

import (
	"fmt"
	"log"
	"os"
	"strconv"

	colorfulprint "github.com/Asort97/vpnBot/clients/colorfulPrint"
	pfsense "github.com/Asort97/vpnBot/clients/pfSense"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func main() {
	pfsenseApiKey := os.Getenv("PFSENSE_API_KEY")
	botToken := os.Getenv("TG_BOT_TOKEN")
	tlsKey := os.Getenv("TLS_CRYPT_KEY")
	tlsBytes, _ := os.ReadFile(tlsKey)
	pfsenseClient := pfsense.New(pfsenseApiKey, []byte(tlsBytes))
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {

		if update.PreCheckoutQuery != nil {
			handlePreCheckout(bot, update.PreCheckoutQuery)
			continue
		}

		if update.Message != nil {

			if update.Message.SuccessfulPayment != nil {
				handleSuccessfulPayment(bot, update.Message)
				continue
			}

			if update.Message.IsCommand() && update.Message.Command() == "start" {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ú–µ–Ω—é:")
				msg.ReplyMarkup = menuKeyboard()
				bot.Send(msg)
				continue
			}

			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ú–µ–Ω—é:")
			msg.ReplyMarkup = menuKeyboard()

			switch update.Message.Text {
			case "–£–¥–∞–ª–∏—Ç—å":
				pfsenseClient.DeleteUserCertificate("4")
			case "–ü–æ–ª—É—á–∏—Ç—å VPN":
				amount := 0
				_ = sendStarsInvoice(bot, update.Message.Chat.ID, amount)
			case "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é":
				instructionWindows(update, bot)
			// case "–û–ø–ª–∞—Ç–∏—Ç—å":
			// 	amount := 0
			// 	_ = sendStarsInvoice(bot, update.Message.Chat.ID, amount)
			case "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å":
				checkStatus(pfsenseClient, update, bot)
			}
		}
	}
}

func checkStatus(pfsenseClient *pfsense.PfSenseClient, update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	_, certRefID, err := pfsenseClient.GetAttachedCertRefIDByUserName(fmt.Sprint(update.Message.From.ID))
	if err != nil {
		colorfulprint.PrintError("Unable to found user %e\n", err)
	}
	certId, err := pfsenseClient.GetCertificateIDByRefid(certRefID)
	if err != nil {
		colorfulprint.PrintError(fmt.Sprintf("Unable to found certificate id:%s by refid:%s %e\n", certId, certRefID, err), err)
	} else {
		colorfulprint.PrintState(fmt.Sprintf("Founded attached cert id:%s of USER:%d and OUR ID OF CERT:%s\n", certRefID, update.Message.From.ID, certId))
	}

	from, until, expired, err := pfsenseClient.GetDateOfCertificate(certId)
	if err != nil {
		colorfulprint.PrintError(fmt.Sprintf("Couldnt get date of certificate{%s}\n", certId), err)
	}

	var status string

	if expired {
		status = "–ò—Å—Ç–µ–∫"
	} else {
		status = "–†–∞–±–æ—Ç–∞–µ—Ç"
	}

	text := fmt.Sprintf("–í–∞—à –ø–æ–¥–ø–∏—Å–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞ —Å %s –∏ –¥–ª–∏—Ç—Å—è –¥–æ %s\n–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã: %s", from, until, status)
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, text)
	bot.Send(msg)
}

func instructionWindows(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	photo1 := tgbotapi.NewPhoto(update.Message.Chat.ID, tgbotapi.FilePath("InstructionPhotos/Windows/1.png"))
	photo1.Caption = "1) –°–∫–∞—á–∞–π—Ç–µ <a href=\"https://openvpn.net/community/\">OpenVPN</a> —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ \n"
	photo2 := tgbotapi.NewPhoto(update.Message.Chat.ID, tgbotapi.FilePath("InstructionPhotos/Windows/2.png"))
	photo2.Caption = "2) –ü–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ —Ç—Ä–µ–π –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É \n"
	photo3 := tgbotapi.NewPhoto(update.Message.Chat.ID, tgbotapi.FilePath("InstructionPhotos/Windows/3.png"))
	photo3.Caption = "3) –ù–∞–∂–º–∏—Ç–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –ø–æ –∑–Ω–∞—á–∫—É OpenVPN –∏ –¥–∞–ª–µ–µ –ò–º–ø–æ—Ä—Ç->–ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–π –º—ã –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–º\n"
	photo4 := tgbotapi.NewPhoto(update.Message.Chat.ID, tgbotapi.FilePath("InstructionPhotos/Windows/4.png"))
	photo4.Caption = "4) –î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –ø–æ –∑–Ω–∞—á–∫—É —Å–Ω–æ–≤–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è\n"
	photo1.ParseMode = "HTML"
	bot.Send(photo1)
	bot.Send(photo2)
	bot.Send(photo3)
	bot.Send(photo4)
}

func menuKeyboard() tgbotapi.ReplyKeyboardMarkup {
	kb := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å VPN"),
			tgbotapi.NewKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"),
			// tgbotapi.NewKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å"),
			tgbotapi.NewKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"),
		),
	)
	kb.ResizeKeyboard = true
	kb.OneTimeKeyboard = false
	return kb
}

func createUserAndSendCertificate(update tgbotapi.Update, pfsenseClient *pfsense.PfSenseClient, bot *tgbotapi.BotAPI) {
	telegramUserid := fmt.Sprint(update.Message.From.ID)
	certName := fmt.Sprintf("Cert%s", telegramUserid)

	var userID string
	userID, isExist := pfsenseClient.IsUserExist(telegramUserid)

	if isExist {
		fmt.Printf("User{%s} is exist and there is his id:%s!\n", telegramUserid, userID)
	} else {
		amount := 0
		_ = sendStarsInvoice(bot, update.Message.Chat.ID, amount)

		fmt.Printf("User{%s} is not exist!\n", telegramUserid)
		userID, _ = pfsenseClient.CreateUser(telegramUserid, "123", "", "", false)
	}

	var certRefID string
	var certID string

	_, certRefID, err := pfsenseClient.GetAttachedCertRefIDByUserName(telegramUserid)

	if err != nil {
		colorfulprint.PrintError(fmt.Sprintf("Couldnt find attached certificate on user{%s}\n", telegramUserid), err)

		uuid, _ := pfsenseClient.GetCARef()
		certID, certRefID, _ = pfsenseClient.CreateCertificate(certName, uuid, "RSA", 2048, "", "sha256", telegramUserid)
		pfsenseClient.AttachCertificateToUser(userID, certRefID)
	} else {
		certID, _ = pfsenseClient.GetCertificateIDByRefid(certRefID)
		_, _, expired, _ := pfsenseClient.GetDateOfCertificate(certID)

		if expired {
			// –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è !!!!!!!!!
			pfsenseClient.DeleteUserCertificate(certID)
			//–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			uuid, _ := pfsenseClient.GetCARef()
			certID, certRefID, _ = pfsenseClient.CreateCertificate(certName, uuid, "RSA", 2048, "", "sha256", telegramUserid)
			pfsenseClient.AttachCertificateToUser(userID, certRefID)

			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!")
			bot.Send(msg)
		}
	}

	// id, err := pfsenseClient.CreateUser(userIdStr, "123", "", "", false)
	// if err != nil {
	// 	fmt.Printf("Couldnt create user, trying to find existing...")
	// 	id, _, _ = pfsenseClient.GetAttachedCertRedIDByUserName(fmt.Sprint(update.Message.From.ID))
	// }

	// uuid, _ := pfsenseClient.GetCARef()
	// certID, certRefID, _ := pfsenseClient.CreateCertificate(certName, uuid, "RSA", 2048, "", "sha256", telegramUserid)
	// pfsenseClient.AttachCertificateToUser(id, certRefID)

	_, certDateUntil, _, _ := pfsenseClient.GetDateOfCertificate(certID)

	// pfsenseClient.ExportCertificateP12(certRefID, "")
	ovpnData, err := pfsenseClient.GenerateOVPN(certRefID, "", "213.21.200.205")
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "Error generating OVPN: "+err.Error())
		bot.Send(msg)
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ OVPN –≤ Telegram –∫–∞–∫ —Ñ–∞–π–ª
	fileBytes := tgbotapi.FileBytes{
		Name:  certName + ".ovpn",
		Bytes: ovpnData,
	}
	docMsg := tgbotapi.NewDocument(update.Message.Chat.ID, fileBytes)
	docMsg.ReplyToMessageID = update.Message.MessageID
	bot.Send(docMsg)

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å userID:{%d} –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω VPN\n–ò—Å—Ç–µ–∫–∞–µ—Ç: %s", update.Message.From.ID, certDateUntil))
	msg.ReplyToMessageID = update.Message.MessageID
	bot.Send(msg)
}

func sendStarsInvoice(bot *tgbotapi.BotAPI, chatID int64, amountStars int) error {
	// if amountStars <= 0 {
	// 	amountStars = 1
	// }
	prices := []tgbotapi.LabeledPrice{
		{Label: "VPN –¥–æ—Å—Ç—É–ø", Amount: amountStars}, // –†–û–í–ù–û –æ–¥–∏–Ω LabeledPrice
	}
	inv := tgbotapi.NewInvoice(
		chatID,
		"VPN –¥–æ—Å—Ç—É–ø",
		"–î–æ—Å—Ç—É–ø –∫ VPN –∫–æ–Ω—Ñ–∏–≥—É –¥–ª—è OpenVPN",
		"order_"+strconv.Itoa(amountStars),
		"",
		"",
		"XTR",
		prices,
	)

	// –¥–æ–±–∞–≤—å —Å—Ç—Ä–æ–∫—É:
	inv.SuggestedTipAmounts = []int{}

	// –ú–æ–∂–Ω–æ –∫–∞—Ä—Ç–∏–Ω–∫—É (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
	// inv.PhotoURL = "https://picsum.photos/seed/vpn/600/400"

	// –Ω–∏–∫–∞–∫–∏–µ NeedName/NeedEmail –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö
	_, err := bot.Send(inv)
	return err
}

func handlePreCheckout(bot *tgbotapi.BotAPI, pcq *tgbotapi.PreCheckoutQuery) {
	// –¢—É—Ç –º–æ–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å payload/—Å—É–º–º—É/–≤–∞–ª—é—Ç—É
	ans := tgbotapi.PreCheckoutConfig{
		PreCheckoutQueryID: pcq.ID,
		OK:                 true,
		// ErrorMessage:    "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫" // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å
	}
	if _, err := bot.Request(ans); err != nil {
		log.Printf("precheckout answer error: %v", err)
	}
}

func handleSuccessfulPayment(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	sp := msg.SuccessfulPayment
	if sp == nil {
		return
	}
	if sp.Currency != "XTR" {
		log.Printf("unexpected currency: %s", sp.Currency)
		return
	}
	log.Printf("paid: %d XTR, payload=%s", sp.TotalAmount, sp.InvoicePayload)

	// üëâ –∑–¥–µ—Å—å –≤—ã–¥–∞–π –¥–æ—Å—Ç—É–ø: –∑–∞–≤–µ–¥–∏ user –≤ pfSense / –∞–∫—Ç–∏–≤–∏—Ä—É–π –ø–æ–¥–ø–∏—Å–∫—É / –ø—Ä.
	// ... —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ ...
	createUserAndSendCertificate(tgbotapi.Update{}, &pfsense.PfSenseClient{}, bot)

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	_, _ = bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º VPN... ‚úÖ"))
}
